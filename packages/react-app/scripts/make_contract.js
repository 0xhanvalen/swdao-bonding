var fs = require('fs');
var path = require('path');
var glob = require('glob');

const minimumInfo = (contract) => ({
	address: contract.address,
	abi: contract.abi,
});

function contractMaker() {
	const contracts = {};

	const source = path.normalize(
		path.join(__dirname, '..', '..', 'contracts', 'deployments', '**', '*.json'),
	);
	const target = path.normalize(path.join(__dirname, '..', 'src', 'config', 'contracts.ts'));
	glob(source, (err, files) => {
		files.forEach((file) => {
			const parts = file.split('/');
			const name = parts.pop().split('.')[0];
			const network = parts.pop();
			if (!network.startsWith('solc')) {
				const contract = require(file);
				if (!contracts[network]) {
					contracts[network] = {};
				}
				contracts[network][name] = contract;
			}
		});

		const cleaned = {};
		Object.keys(contracts).forEach((network) => {
			const raw = contracts[network];
			const clean = {};
			if (raw.SWDAO) {
				clean.SWD = minimumInfo(raw.SWDAO);
			}
			if (raw.SwdStaking) {
				clean.Staking = minimumInfo(raw.SwdStaking);
			}
			Object.keys(raw).forEach((key) => {
				if (key.startsWith('ERC') || key.startsWith('Set')) {
					const symbol = raw[key].args[2];
					clean[symbol] = minimumInfo(raw[key]);
				}
			});
			cleaned[network] = clean;
		});
		fs.writeFileSync(
			target,
			`// prettier-ignore
// autogenerated by make_contract.js
import { Contracts } from './types';

export const CONTRACTS: Contracts = ${JSON.stringify(cleaned, null, 2)};
`,
		);
		console.log(JSON.stringify(cleaned, null, 2));
	});
}

contractMaker();
