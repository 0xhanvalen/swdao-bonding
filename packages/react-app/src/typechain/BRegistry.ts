/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BRegistryInterface extends utils.Interface {
  functions: {
    "_getEffectiveLiquidityForPoolsPurge(address,address,address[])": FunctionFragment;
    "addPoolPair(address,address,address)": FunctionFragment;
    "addPools(address[],address,address)": FunctionFragment;
    "getBestPools(address,address)": FunctionFragment;
    "getBestPoolsWithLimit(address,address,uint256)": FunctionFragment;
    "getPairInfo(address,address,address)": FunctionFragment;
    "getPoolsWithLimit(address,address,uint256,uint256)": FunctionFragment;
    "sortPools(address[],uint256)": FunctionFragment;
    "sortPoolsWithPurge(address[],uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_getEffectiveLiquidityForPoolsPurge",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addPoolPair",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPools",
    values: [string[], string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestPools",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestPoolsWithLimit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairInfo",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolsWithLimit",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sortPools",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sortPoolsWithPurge",
    values: [string[], BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_getEffectiveLiquidityForPoolsPurge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPoolPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBestPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestPoolsWithLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolsWithLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sortPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sortPoolsWithPurge",
    data: BytesLike
  ): Result;

  events: {
    "IndicesUpdated(address,address,bytes32,bytes32)": EventFragment;
    "PoolTokenPairAdded(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IndicesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolTokenPairAdded"): EventFragment;
}

export type IndicesUpdatedEvent = TypedEvent<
  [string, string, string, string],
  { token1: string; token2: string; oldIndices: string; newIndices: string }
>;

export type IndicesUpdatedEventFilter = TypedEventFilter<IndicesUpdatedEvent>;

export type PoolTokenPairAddedEvent = TypedEvent<
  [string, string, string],
  { pool: string; token1: string; token2: string }
>;

export type PoolTokenPairAddedEventFilter = TypedEventFilter<PoolTokenPairAddedEvent>;

export interface BRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _getEffectiveLiquidityForPoolsPurge(
      token1: string,
      token2: string,
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPoolPair(
      pool: string,
      token1: string,
      token2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPools(
      pools: string[],
      token1: string,
      token2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBestPools(
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pools: string[] }>;

    getBestPoolsWithLimit(
      fromToken: string,
      destToken: string,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pools: string[] }>;

    getPairInfo(
      pool: string,
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        weight1: BigNumber;
        weight2: BigNumber;
        swapFee: BigNumber;
      }
    >;

    getPoolsWithLimit(
      fromToken: string,
      destToken: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { result: string[] }>;

    sortPools(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sortPoolsWithPurge(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _getEffectiveLiquidityForPoolsPurge(
    token1: string,
    token2: string,
    pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPoolPair(
    pool: string,
    token1: string,
    token2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPools(
    pools: string[],
    token1: string,
    token2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBestPools(
    fromToken: string,
    destToken: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBestPoolsWithLimit(
    fromToken: string,
    destToken: string,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getPairInfo(
    pool: string,
    fromToken: string,
    destToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      weight1: BigNumber;
      weight2: BigNumber;
      swapFee: BigNumber;
    }
  >;

  getPoolsWithLimit(
    fromToken: string,
    destToken: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  sortPools(
    tokens: string[],
    lengthLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sortPoolsWithPurge(
    tokens: string[],
    lengthLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _getEffectiveLiquidityForPoolsPurge(
      token1: string,
      token2: string,
      pools: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    addPoolPair(
      pool: string,
      token1: string,
      token2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPools(
      pools: string[],
      token1: string,
      token2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBestPools(
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBestPoolsWithLimit(
      fromToken: string,
      destToken: string,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getPairInfo(
      pool: string,
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        weight1: BigNumber;
        weight2: BigNumber;
        swapFee: BigNumber;
      }
    >;

    getPoolsWithLimit(
      fromToken: string,
      destToken: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    sortPools(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sortPoolsWithPurge(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "IndicesUpdated(address,address,bytes32,bytes32)"(
      token1?: string | null,
      token2?: string | null,
      oldIndices?: null,
      newIndices?: null
    ): IndicesUpdatedEventFilter;
    IndicesUpdated(
      token1?: string | null,
      token2?: string | null,
      oldIndices?: null,
      newIndices?: null
    ): IndicesUpdatedEventFilter;

    "PoolTokenPairAdded(address,address,address)"(
      pool?: string | null,
      token1?: string | null,
      token2?: string | null
    ): PoolTokenPairAddedEventFilter;
    PoolTokenPairAdded(
      pool?: string | null,
      token1?: string | null,
      token2?: string | null
    ): PoolTokenPairAddedEventFilter;
  };

  estimateGas: {
    _getEffectiveLiquidityForPoolsPurge(
      token1: string,
      token2: string,
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPoolPair(
      pool: string,
      token1: string,
      token2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPools(
      pools: string[],
      token1: string,
      token2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBestPools(
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBestPoolsWithLimit(
      fromToken: string,
      destToken: string,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairInfo(
      pool: string,
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolsWithLimit(
      fromToken: string,
      destToken: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sortPools(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sortPoolsWithPurge(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _getEffectiveLiquidityForPoolsPurge(
      token1: string,
      token2: string,
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPoolPair(
      pool: string,
      token1: string,
      token2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPools(
      pools: string[],
      token1: string,
      token2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBestPools(
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBestPoolsWithLimit(
      fromToken: string,
      destToken: string,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairInfo(
      pool: string,
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolsWithLimit(
      fromToken: string,
      destToken: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sortPools(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sortPoolsWithPurge(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
