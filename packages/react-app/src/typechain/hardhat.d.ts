/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Pool__factory>;
    getContractFactory(
      name: "IUniswapV3PoolActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolActions__factory>;
    getContractFactory(
      name: "IUniswapV3PoolDerivedState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolDerivedState__factory>;
    getContractFactory(
      name: "IUniswapV3PoolEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolEvents__factory>;
    getContractFactory(
      name: "IUniswapV3PoolImmutables",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolImmutables__factory>;
    getContractFactory(
      name: "IUniswapV3PoolOwnerActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolOwnerActions__factory>;
    getContractFactory(
      name: "IUniswapV3PoolState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolState__factory>;
    getContractFactory(
      name: "IAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAToken__factory>;
    getContractFactory(
      name: "ILendingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPool__factory>;
    getContractFactory(
      name: "ILendingPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPoolAddressesProvider__factory>;
    getContractFactory(
      name: "IProtocolDataProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProtocolDataProvider__factory>;
    getContractFactory(
      name: "IStableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStableDebtToken__factory>;
    getContractFactory(
      name: "IVariableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVariableDebtToken__factory>;
    getContractFactory(
      name: "IAaveLendingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveLendingPool__factory>;
    getContractFactory(
      name: "IAaveLendingPoolCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveLendingPoolCore__factory>;
    getContractFactory(
      name: "ICErc20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICErc20__factory>;
    getContractFactory(
      name: "ICEth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICEth__factory>;
    getContractFactory(
      name: "IComptroller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IComptroller__factory>;
    getContractFactory(
      name: "IDMMFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDMMFactory__factory>;
    getContractFactory(
      name: "IDMMPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDMMPool__factory>;
    getContractFactory(
      name: "IGaugeController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGaugeController__factory>;
    getContractFactory(
      name: "IKyberNetworkProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKyberNetworkProxy__factory>;
    getContractFactory(
      name: "IStakingRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingRewards__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "ISynth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISynth__factory>;
    getContractFactory(
      name: "ISynthetixExchanger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISynthetixExchanger__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IYearnVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYearnVault__factory>;
    getContractFactory(
      name: "IAccountBalance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccountBalance__factory>;
    getContractFactory(
      name: "IClearingHouse",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClearingHouse__factory>;
    getContractFactory(
      name: "IClearingHouseConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClearingHouseConfig__factory>;
    getContractFactory(
      name: "IExchange",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExchange__factory>;
    getContractFactory(
      name: "IIndexPrice",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIndexPrice__factory>;
    getContractFactory(
      name: "IMarketRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMarketRegistry__factory>;
    getContractFactory(
      name: "IQuoter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuoter__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "IAmmAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAmmAdapter__factory>;
    getContractFactory(
      name: "IBasicIssuanceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBasicIssuanceModule__factory>;
    getContractFactory(
      name: "IClaimAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClaimAdapter__factory>;
    getContractFactory(
      name: "IController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IController__factory>;
    getContractFactory(
      name: "IDebtIssuanceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDebtIssuanceModule__factory>;
    getContractFactory(
      name: "IExchangeAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExchangeAdapter__factory>;
    getContractFactory(
      name: "IGovernanceAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernanceAdapter__factory>;
    getContractFactory(
      name: "IIndexExchangeAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIndexExchangeAdapter__factory>;
    getContractFactory(
      name: "IIntegrationRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIntegrationRegistry__factory>;
    getContractFactory(
      name: "IIssuanceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIssuanceModule__factory>;
    getContractFactory(
      name: "IManagerIssuanceHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IManagerIssuanceHook__factory>;
    getContractFactory(
      name: "IModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModule__factory>;
    getContractFactory(
      name: "IModuleIssuanceHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModuleIssuanceHook__factory>;
    getContractFactory(
      name: "IModuleIssuanceHookV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModuleIssuanceHookV2__factory>;
    getContractFactory(
      name: "INAVIssuanceHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INAVIssuanceHook__factory>;
    getContractFactory(
      name: "INAVIssuanceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INAVIssuanceModule__factory>;
    getContractFactory(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: "IOracleAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracleAdapter__factory>;
    getContractFactory(
      name: "IPerpV2LeverageModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPerpV2LeverageModule__factory>;
    getContractFactory(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: "ISetToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISetToken__factory>;
    getContractFactory(
      name: "ISetTokenCreator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISetTokenCreator__factory>;
    getContractFactory(
      name: "ISetValuer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISetValuer__factory>;
    getContractFactory(
      name: "IStakingAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingAdapter__factory>;
    getContractFactory(
      name: "IStreamingFeeModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStreamingFeeModule__factory>;
    getContractFactory(
      name: "ITradeModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITradeModule__factory>;
    getContractFactory(
      name: "IWrapAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWrapAdapter__factory>;
    getContractFactory(
      name: "IWrapV2Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWrapV2Adapter__factory>;
    getContractFactory(
      name: "AddressArrayUtilsMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressArrayUtilsMock__factory>;
    getContractFactory(
      name: "ContractCallerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContractCallerMock__factory>;
    getContractFactory(
      name: "ExplicitERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExplicitERC20Mock__factory>;
    getContractFactory(
      name: "ChainlinkAggregatorMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainlinkAggregatorMock__factory>;
    getContractFactory(
      name: "CompoundPriceOracleMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundPriceOracleMock__factory>;
    getContractFactory(
      name: "ComptrollerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerMock__factory>;
    getContractFactory(
      name: "GaugeControllerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GaugeControllerMock__factory>;
    getContractFactory(
      name: "KyberNetworkProxyMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KyberNetworkProxyMock__factory>;
    getContractFactory(
      name: "LendingPoolAddressesProviderMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LendingPoolAddressesProviderMock__factory>;
    getContractFactory(
      name: "OneInchExchangeMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OneInchExchangeMock__factory>;
    getContractFactory(
      name: "ProtocolDataProviderMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProtocolDataProviderMock__factory>;
    getContractFactory(
      name: "SynthetixExchangerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SynthetixExchangerMock__factory>;
    getContractFactory(
      name: "SynthMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SynthMock__factory>;
    getContractFactory(
      name: "YearnStrategyMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YearnStrategyMock__factory>;
    getContractFactory(
      name: "YearnVaultMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YearnVaultMock__factory>;
    getContractFactory(
      name: "ZeroExMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZeroExMock__factory>;
    getContractFactory(
      name: "ForceFunderMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ForceFunderMock__factory>;
    getContractFactory(
      name: "GodModeMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GodModeMock__factory>;
    getContractFactory(
      name: "AmmAdapterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AmmAdapterMock__factory>;
    getContractFactory(
      name: "ClaimAdapterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimAdapterMock__factory>;
    getContractFactory(
      name: "GovernanceAdapterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceAdapterMock__factory>;
    getContractFactory(
      name: "StakingAdapterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingAdapterMock__factory>;
    getContractFactory(
      name: "TradeAdapterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TradeAdapterMock__factory>;
    getContractFactory(
      name: "WrapAdapterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrapAdapterMock__factory>;
    getContractFactory(
      name: "WrapV2AdapterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrapV2AdapterMock__factory>;
    getContractFactory(
      name: "OracleAdapterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleAdapterMock__factory>;
    getContractFactory(
      name: "OracleMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleMock__factory>;
    getContractFactory(
      name: "PositionMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionMock__factory>;
    getContractFactory(
      name: "PositionV2Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionV2Mock__factory>;
    getContractFactory(
      name: "PreciseUnitMathMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PreciseUnitMathMock__factory>;
    getContractFactory(
      name: "CustomSetValuerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CustomSetValuerMock__factory>;
    getContractFactory(
      name: "AaveLendingPoolCoreMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveLendingPoolCoreMock__factory>;
    getContractFactory(
      name: "AaveLendingPoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveLendingPoolMock__factory>;
    getContractFactory(
      name: "AaveV2Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2Mock__factory>;
    getContractFactory(
      name: "CompoundMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundMock__factory>;
    getContractFactory(
      name: "PerpV2LibraryV2Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2LibraryV2Mock__factory>;
    getContractFactory(
      name: "PerpV2Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2Mock__factory>;
    getContractFactory(
      name: "PerpV2PositionsMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2PositionsMock__factory>;
    getContractFactory(
      name: "UniswapV3MathMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3MathMock__factory>;
    getContractFactory(
      name: "InvokeMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InvokeMock__factory>;
    getContractFactory(
      name: "IssuanceValidationUtilsMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IssuanceValidationUtilsMock__factory>;
    getContractFactory(
      name: "ModuleBaseMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleBaseMock__factory>;
    getContractFactory(
      name: "ModuleBaseV2Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleBaseV2Mock__factory>;
    getContractFactory(
      name: "ResourceIdentifierMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ResourceIdentifierMock__factory>;
    getContractFactory(
      name: "SetTokenAccessibleMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SetTokenAccessibleMock__factory>;
    getContractFactory(
      name: "DebtIssuanceMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DebtIssuanceMock__factory>;
    getContractFactory(
      name: "DebtModuleMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DebtModuleMock__factory>;
    getContractFactory(
      name: "ManagerIssuanceHookMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ManagerIssuanceHookMock__factory>;
    getContractFactory(
      name: "ModuleIssuanceHookMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleIssuanceHookMock__factory>;
    getContractFactory(
      name: "NAVIssuanceCaller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NAVIssuanceCaller__factory>;
    getContractFactory(
      name: "NAVIssuanceHookMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NAVIssuanceHookMock__factory>;
    getContractFactory(
      name: "StandardTokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardTokenMock__factory>;
    getContractFactory(
      name: "StandardTokenWithFeeMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardTokenWithFeeMock__factory>;
    getContractFactory(
      name: "StandardTokenWithRoundingErrorMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardTokenWithRoundingErrorMock__factory>;
    getContractFactory(
      name: "StringArrayUtilsMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StringArrayUtilsMock__factory>;
    getContractFactory(
      name: "Uint256ArrayUtilsMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Uint256ArrayUtilsMock__factory>;
    getContractFactory(
      name: "UnitConversionUtilsMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UnitConversionUtilsMock__factory>;
    getContractFactory(
      name: "AMMSplitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AMMSplitter__factory>;
    getContractFactory(
      name: "AssetLimitHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssetLimitHook__factory>;
    getContractFactory(
      name: "ERC20Viewer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Viewer__factory>;
    getContractFactory(
      name: "PerpV2LeverageModuleViewer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2LeverageModuleViewer__factory>;
    getContractFactory(
      name: "ProtocolViewer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProtocolViewer__factory>;
    getContractFactory(
      name: "SetTokenViewer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SetTokenViewer__factory>;
    getContractFactory(
      name: "StreamingFeeModuleViewer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StreamingFeeModuleViewer__factory>;
    getContractFactory(
      name: "Controller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Controller__factory>;
    getContractFactory(
      name: "UniswapV2AmmAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2AmmAdapter__factory>;
    getContractFactory(
      name: "CompClaimAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompClaimAdapter__factory>;
    getContractFactory(
      name: "KyberExchangeAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KyberExchangeAdapter__factory>;
    getContractFactory(
      name: "OneInchExchangeAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OneInchExchangeAdapter__factory>;
    getContractFactory(
      name: "SynthetixExchangeAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SynthetixExchangeAdapter__factory>;
    getContractFactory(
      name: "UniswapV2ExchangeAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2ExchangeAdapter__factory>;
    getContractFactory(
      name: "UniswapV2ExchangeAdapterV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2ExchangeAdapterV2__factory>;
    getContractFactory(
      name: "UniswapV3ExchangeAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3ExchangeAdapter__factory>;
    getContractFactory(
      name: "ZeroExApiAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZeroExApiAdapter__factory>;
    getContractFactory(
      name: "AaveGovernanceV2Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveGovernanceV2Adapter__factory>;
    getContractFactory(
      name: "CompoundBravoGovernanceAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundBravoGovernanceAdapter__factory>;
    getContractFactory(
      name: "CompoundLikeGovernanceAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundLikeGovernanceAdapter__factory>;
    getContractFactory(
      name: "SnapshotGovernanceAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SnapshotGovernanceAdapter__factory>;
    getContractFactory(
      name: "BalancerV1IndexExchangeAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerV1IndexExchangeAdapter__factory>;
    getContractFactory(
      name: "KyberV3IndexExchangeAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KyberV3IndexExchangeAdapter__factory>;
    getContractFactory(
      name: "UniswapV2IndexExchangeAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2IndexExchangeAdapter__factory>;
    getContractFactory(
      name: "UniswapV3IndexExchangeAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3IndexExchangeAdapter__factory>;
    getContractFactory(
      name: "AaveV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2__factory>;
    getContractFactory(
      name: "Compound",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Compound__factory>;
    getContractFactory(
      name: "PerpV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2__factory>;
    getContractFactory(
      name: "PerpV2LibraryV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2LibraryV2__factory>;
    getContractFactory(
      name: "PerpV2Positions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2Positions__factory>;
    getContractFactory(
      name: "CTokenOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CTokenOracle__factory>;
    getContractFactory(
      name: "UniswapPairPriceAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapPairPriceAdapter__factory>;
    getContractFactory(
      name: "YearnVaultOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YearnVaultOracle__factory>;
    getContractFactory(
      name: "CurveStakingAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveStakingAdapter__factory>;
    getContractFactory(
      name: "UniswapV2TransferFeeExchangeAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2TransferFeeExchangeAdapter__factory>;
    getContractFactory(
      name: "AaveV2WrapV2Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2WrapV2Adapter__factory>;
    getContractFactory(
      name: "CompoundWrapV2Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundWrapV2Adapter__factory>;
    getContractFactory(
      name: "YearnWrapV2Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YearnWrapV2Adapter__factory>;
    getContractFactory(
      name: "IntegrationRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IntegrationRegistry__factory>;
    getContractFactory(
      name: "ModuleBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleBase__factory>;
    getContractFactory(
      name: "ModuleBaseV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleBaseV2__factory>;
    getContractFactory(
      name: "PositionV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionV2__factory>;
    getContractFactory(
      name: "SetTokenAccessible",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SetTokenAccessible__factory>;
    getContractFactory(
      name: "AaveLeverageModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveLeverageModule__factory>;
    getContractFactory(
      name: "AirdropModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AirdropModule__factory>;
    getContractFactory(
      name: "AmmModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AmmModule__factory>;
    getContractFactory(
      name: "BasicIssuanceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicIssuanceModule__factory>;
    getContractFactory(
      name: "ClaimModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimModule__factory>;
    getContractFactory(
      name: "CompoundLeverageModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundLeverageModule__factory>;
    getContractFactory(
      name: "CustomOracleNavIssuanceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CustomOracleNavIssuanceModule__factory>;
    getContractFactory(
      name: "DebtIssuanceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DebtIssuanceModule__factory>;
    getContractFactory(
      name: "DebtIssuanceModuleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DebtIssuanceModuleV2__factory>;
    getContractFactory(
      name: "GeneralIndexModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GeneralIndexModule__factory>;
    getContractFactory(
      name: "GovernanceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceModule__factory>;
    getContractFactory(
      name: "IssuanceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IssuanceModule__factory>;
    getContractFactory(
      name: "SingleIndexModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SingleIndexModule__factory>;
    getContractFactory(
      name: "SlippageIssuanceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlippageIssuanceModule__factory>;
    getContractFactory(
      name: "StakingModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingModule__factory>;
    getContractFactory(
      name: "StreamingFeeModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StreamingFeeModule__factory>;
    getContractFactory(
      name: "TradeModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TradeModule__factory>;
    getContractFactory(
      name: "WrapModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrapModule__factory>;
    getContractFactory(
      name: "WrapModuleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrapModuleV2__factory>;
    getContractFactory(
      name: "PerpV2BasisTradingModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2BasisTradingModule__factory>;
    getContractFactory(
      name: "PerpV2LeverageModuleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2LeverageModuleV2__factory>;
    getContractFactory(
      name: "PriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceOracle__factory>;
    getContractFactory(
      name: "SetToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SetToken__factory>;
    getContractFactory(
      name: "SetTokenCreator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SetTokenCreator__factory>;
    getContractFactory(
      name: "SetValuer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SetValuer__factory>;
    getContractFactory(
      name: "BaseStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseStrategy__factory>;
    getContractFactory(
      name: "BaseStrategyInitializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseStrategyInitializable__factory>;
    getContractFactory(
      name: "StrategyAPI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StrategyAPI__factory>;
    getContractFactory(
      name: "VaultAPI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultAPI__factory>;
    getContractFactory(
      name: "AaveGovernanceV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveGovernanceV2__factory>;
    getContractFactory(
      name: "AaveTokenV2Mintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveTokenV2Mintable__factory>;
    getContractFactory(
      name: "AaveV2AToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2AToken__factory>;
    getContractFactory(
      name: "AaveV2DefaultReserveInterestRateStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2DefaultReserveInterestRateStrategy__factory>;
    getContractFactory(
      name: "AaveV2LendingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2LendingPool__factory>;
    getContractFactory(
      name: "AaveV2LendingPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2LendingPoolAddressesProvider__factory>;
    getContractFactory(
      name: "AaveV2LendingPoolCollateralManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2LendingPoolCollateralManager__factory>;
    getContractFactory(
      name: "AaveV2LendingPoolConfigurator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2LendingPoolConfigurator__factory>;
    getContractFactory(
      name: "AaveV2LendingRateOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2LendingRateOracle__factory>;
    getContractFactory(
      name: "AaveV2Oracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2Oracle__factory>;
    getContractFactory(
      name: "AaveV2PriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2PriceOracle__factory>;
    getContractFactory(
      name: "AaveV2ProtocolDataProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2ProtocolDataProvider__factory>;
    getContractFactory(
      name: "AaveV2StableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2StableDebtToken__factory>;
    getContractFactory(
      name: "AaveV2StakedTokenIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2StakedTokenIncentivesController__factory>;
    getContractFactory(
      name: "AaveV2VariableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveV2VariableDebtToken__factory>;
    getContractFactory(
      name: "Executor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Executor__factory>;
    getContractFactory(
      name: "GovernanceStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceStrategy__factory>;
    getContractFactory(
      name: "GenericLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GenericLogic__factory>;
    getContractFactory(
      name: "ReserveLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveLogic__factory>;
    getContractFactory(
      name: "ValidationLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidationLogic__factory>;
    getContractFactory(
      name: "BFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BFactory__factory>;
    getContractFactory(
      name: "BPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BPool__factory>;
    getContractFactory(
      name: "BRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BRegistry__factory>;
    getContractFactory(
      name: "ExchangeProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExchangeProxy__factory>;
    getContractFactory(
      name: "CERc20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CERc20__factory>;
    getContractFactory(
      name: "CEther",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CEther__factory>;
    getContractFactory(
      name: "Comp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Comp__factory>;
    getContractFactory(
      name: "CompoundGovernorAlpha",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundGovernorAlpha__factory>;
    getContractFactory(
      name: "CompoundGovernorBravoDelegate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundGovernorBravoDelegate__factory>;
    getContractFactory(
      name: "CompoundGovernorBravoDelegator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundGovernorBravoDelegator__factory>;
    getContractFactory(
      name: "CompoundTimelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundTimelock__factory>;
    getContractFactory(
      name: "Comptroller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Comptroller__factory>;
    getContractFactory(
      name: "PriceOracleProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceOracleProxy__factory>;
    getContractFactory(
      name: "Unitroller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Unitroller__factory>;
    getContractFactory(
      name: "WhitePaperInterestRateModel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhitePaperInterestRateModel__factory>;
    getContractFactory(
      name: "CRVToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CRVToken__factory>;
    getContractFactory(
      name: "CurveDeposit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveDeposit__factory>;
    getContractFactory(
      name: "CurvePoolERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurvePoolERC20__factory>;
    getContractFactory(
      name: "GaugeController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GaugeController__factory>;
    getContractFactory(
      name: "LiquidityGauge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityGauge__factory>;
    getContractFactory(
      name: "LiquidityGaugeReward",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityGaugeReward__factory>;
    getContractFactory(
      name: "Minter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Minter__factory>;
    getContractFactory(
      name: "Stableswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Stableswap__factory>;
    getContractFactory(
      name: "DMMFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DMMFactory__factory>;
    getContractFactory(
      name: "DMMPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DMMPool__factory>;
    getContractFactory(
      name: "DMMRouter02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DMMRouter02__factory>;
    getContractFactory(
      name: "KyberNetworkTokenV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KyberNetworkTokenV2__factory>;
    getContractFactory(
      name: "PerpV2AccountBalance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2AccountBalance__factory>;
    getContractFactory(
      name: "PerpV2BaseToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2BaseToken__factory>;
    getContractFactory(
      name: "PerpV2ChainlinkPriceFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2ChainlinkPriceFeed__factory>;
    getContractFactory(
      name: "PerpV2ClearingHouse",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2ClearingHouse__factory>;
    getContractFactory(
      name: "PerpV2ClearingHouseConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2ClearingHouseConfig__factory>;
    getContractFactory(
      name: "PerpV2Exchange",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2Exchange__factory>;
    getContractFactory(
      name: "PerpV2InsuranceFund",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2InsuranceFund__factory>;
    getContractFactory(
      name: "PerpV2MarketRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2MarketRegistry__factory>;
    getContractFactory(
      name: "PerpV2OrderBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2OrderBook__factory>;
    getContractFactory(
      name: "PerpV2Quoter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2Quoter__factory>;
    getContractFactory(
      name: "PerpV2QuoteToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2QuoteToken__factory>;
    getContractFactory(
      name: "PerpV2TestAggregatorV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2TestAggregatorV3__factory>;
    getContractFactory(
      name: "PerpV2Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2Vault__factory>;
    getContractFactory(
      name: "PerpV2VirtualToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpV2VirtualToken__factory>;
    getContractFactory(
      name: "DelegateRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegateRegistry__factory>;
    getContractFactory(
      name: "StakingRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingRewards__factory>;
    getContractFactory(
      name: "Uni",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Uni__factory>;
    getContractFactory(
      name: "UniswapGovernorAlpha",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapGovernorAlpha__factory>;
    getContractFactory(
      name: "UniswapTimelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapTimelock__factory>;
    getContractFactory(
      name: "UniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Factory__factory>;
    getContractFactory(
      name: "UniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Pair__factory>;
    getContractFactory(
      name: "UniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Router02__factory>;
    getContractFactory(
      name: "NFTDescriptor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTDescriptor__factory>;
    getContractFactory(
      name: "NonfungiblePositionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonfungiblePositionManager__factory>;
    getContractFactory(
      name: "Quoter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Quoter__factory>;
    getContractFactory(
      name: "SwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapRouter__factory>;
    getContractFactory(
      name: "UniswapV3Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3Factory__factory>;
    getContractFactory(
      name: "UniswapV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3Pool__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Registry__factory>;
    getContractFactory(
      name: "Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vault__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV3Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Pool>;
    getContractAt(
      name: "IUniswapV3PoolActions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolActions>;
    getContractAt(
      name: "IUniswapV3PoolDerivedState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolDerivedState>;
    getContractAt(
      name: "IUniswapV3PoolEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolEvents>;
    getContractAt(
      name: "IUniswapV3PoolImmutables",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolImmutables>;
    getContractAt(
      name: "IUniswapV3PoolOwnerActions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolOwnerActions>;
    getContractAt(
      name: "IUniswapV3PoolState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolState>;
    getContractAt(
      name: "IAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAToken>;
    getContractAt(
      name: "ILendingPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPool>;
    getContractAt(
      name: "ILendingPoolAddressesProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILendingPoolAddressesProvider>;
    getContractAt(
      name: "IProtocolDataProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProtocolDataProvider>;
    getContractAt(
      name: "IStableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStableDebtToken>;
    getContractAt(
      name: "IVariableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVariableDebtToken>;
    getContractAt(
      name: "IAaveLendingPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAaveLendingPool>;
    getContractAt(
      name: "IAaveLendingPoolCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAaveLendingPoolCore>;
    getContractAt(
      name: "ICErc20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICErc20>;
    getContractAt(
      name: "ICEth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICEth>;
    getContractAt(
      name: "IComptroller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IComptroller>;
    getContractAt(
      name: "IDMMFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDMMFactory>;
    getContractAt(
      name: "IDMMPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDMMPool>;
    getContractAt(
      name: "IGaugeController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGaugeController>;
    getContractAt(
      name: "IKyberNetworkProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKyberNetworkProxy>;
    getContractAt(
      name: "IStakingRewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingRewards>;
    getContractAt(
      name: "ISwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: "ISynth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISynth>;
    getContractAt(
      name: "ISynthetixExchanger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISynthetixExchanger>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IYearnVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYearnVault>;
    getContractAt(
      name: "IAccountBalance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccountBalance>;
    getContractAt(
      name: "IClearingHouse",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClearingHouse>;
    getContractAt(
      name: "IClearingHouseConfig",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClearingHouseConfig>;
    getContractAt(
      name: "IExchange",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExchange>;
    getContractAt(
      name: "IIndexPrice",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIndexPrice>;
    getContractAt(
      name: "IMarketRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMarketRegistry>;
    getContractAt(
      name: "IQuoter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuoter>;
    getContractAt(
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "IAmmAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAmmAdapter>;
    getContractAt(
      name: "IBasicIssuanceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBasicIssuanceModule>;
    getContractAt(
      name: "IClaimAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IClaimAdapter>;
    getContractAt(
      name: "IController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IController>;
    getContractAt(
      name: "IDebtIssuanceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDebtIssuanceModule>;
    getContractAt(
      name: "IExchangeAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExchangeAdapter>;
    getContractAt(
      name: "IGovernanceAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernanceAdapter>;
    getContractAt(
      name: "IIndexExchangeAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIndexExchangeAdapter>;
    getContractAt(
      name: "IIntegrationRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIntegrationRegistry>;
    getContractAt(
      name: "IIssuanceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIssuanceModule>;
    getContractAt(
      name: "IManagerIssuanceHook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IManagerIssuanceHook>;
    getContractAt(
      name: "IModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModule>;
    getContractAt(
      name: "IModuleIssuanceHook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModuleIssuanceHook>;
    getContractAt(
      name: "IModuleIssuanceHookV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModuleIssuanceHookV2>;
    getContractAt(
      name: "INAVIssuanceHook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INAVIssuanceHook>;
    getContractAt(
      name: "INAVIssuanceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INAVIssuanceModule>;
    getContractAt(
      name: "IOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: "IOracleAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracleAdapter>;
    getContractAt(
      name: "IPerpV2LeverageModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPerpV2LeverageModule>;
    getContractAt(
      name: "IPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: "ISetToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISetToken>;
    getContractAt(
      name: "ISetTokenCreator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISetTokenCreator>;
    getContractAt(
      name: "ISetValuer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISetValuer>;
    getContractAt(
      name: "IStakingAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingAdapter>;
    getContractAt(
      name: "IStreamingFeeModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStreamingFeeModule>;
    getContractAt(
      name: "ITradeModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITradeModule>;
    getContractAt(
      name: "IWrapAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWrapAdapter>;
    getContractAt(
      name: "IWrapV2Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWrapV2Adapter>;
    getContractAt(
      name: "AddressArrayUtilsMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressArrayUtilsMock>;
    getContractAt(
      name: "ContractCallerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContractCallerMock>;
    getContractAt(
      name: "ExplicitERC20Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExplicitERC20Mock>;
    getContractAt(
      name: "ChainlinkAggregatorMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainlinkAggregatorMock>;
    getContractAt(
      name: "CompoundPriceOracleMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundPriceOracleMock>;
    getContractAt(
      name: "ComptrollerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerMock>;
    getContractAt(
      name: "GaugeControllerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GaugeControllerMock>;
    getContractAt(
      name: "KyberNetworkProxyMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KyberNetworkProxyMock>;
    getContractAt(
      name: "LendingPoolAddressesProviderMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LendingPoolAddressesProviderMock>;
    getContractAt(
      name: "OneInchExchangeMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OneInchExchangeMock>;
    getContractAt(
      name: "ProtocolDataProviderMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProtocolDataProviderMock>;
    getContractAt(
      name: "SynthetixExchangerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SynthetixExchangerMock>;
    getContractAt(
      name: "SynthMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SynthMock>;
    getContractAt(
      name: "YearnStrategyMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YearnStrategyMock>;
    getContractAt(
      name: "YearnVaultMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YearnVaultMock>;
    getContractAt(
      name: "ZeroExMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZeroExMock>;
    getContractAt(
      name: "ForceFunderMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ForceFunderMock>;
    getContractAt(
      name: "GodModeMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GodModeMock>;
    getContractAt(
      name: "AmmAdapterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AmmAdapterMock>;
    getContractAt(
      name: "ClaimAdapterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaimAdapterMock>;
    getContractAt(
      name: "GovernanceAdapterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceAdapterMock>;
    getContractAt(
      name: "StakingAdapterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingAdapterMock>;
    getContractAt(
      name: "TradeAdapterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TradeAdapterMock>;
    getContractAt(
      name: "WrapAdapterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrapAdapterMock>;
    getContractAt(
      name: "WrapV2AdapterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrapV2AdapterMock>;
    getContractAt(
      name: "OracleAdapterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleAdapterMock>;
    getContractAt(
      name: "OracleMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleMock>;
    getContractAt(
      name: "PositionMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionMock>;
    getContractAt(
      name: "PositionV2Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionV2Mock>;
    getContractAt(
      name: "PreciseUnitMathMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PreciseUnitMathMock>;
    getContractAt(
      name: "CustomSetValuerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CustomSetValuerMock>;
    getContractAt(
      name: "AaveLendingPoolCoreMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveLendingPoolCoreMock>;
    getContractAt(
      name: "AaveLendingPoolMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveLendingPoolMock>;
    getContractAt(
      name: "AaveV2Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2Mock>;
    getContractAt(
      name: "CompoundMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundMock>;
    getContractAt(
      name: "PerpV2LibraryV2Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2LibraryV2Mock>;
    getContractAt(
      name: "PerpV2Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2Mock>;
    getContractAt(
      name: "PerpV2PositionsMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2PositionsMock>;
    getContractAt(
      name: "UniswapV3MathMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3MathMock>;
    getContractAt(
      name: "InvokeMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InvokeMock>;
    getContractAt(
      name: "IssuanceValidationUtilsMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IssuanceValidationUtilsMock>;
    getContractAt(
      name: "ModuleBaseMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleBaseMock>;
    getContractAt(
      name: "ModuleBaseV2Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleBaseV2Mock>;
    getContractAt(
      name: "ResourceIdentifierMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ResourceIdentifierMock>;
    getContractAt(
      name: "SetTokenAccessibleMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SetTokenAccessibleMock>;
    getContractAt(
      name: "DebtIssuanceMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DebtIssuanceMock>;
    getContractAt(
      name: "DebtModuleMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DebtModuleMock>;
    getContractAt(
      name: "ManagerIssuanceHookMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ManagerIssuanceHookMock>;
    getContractAt(
      name: "ModuleIssuanceHookMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleIssuanceHookMock>;
    getContractAt(
      name: "NAVIssuanceCaller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NAVIssuanceCaller>;
    getContractAt(
      name: "NAVIssuanceHookMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NAVIssuanceHookMock>;
    getContractAt(
      name: "StandardTokenMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardTokenMock>;
    getContractAt(
      name: "StandardTokenWithFeeMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardTokenWithFeeMock>;
    getContractAt(
      name: "StandardTokenWithRoundingErrorMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardTokenWithRoundingErrorMock>;
    getContractAt(
      name: "StringArrayUtilsMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StringArrayUtilsMock>;
    getContractAt(
      name: "Uint256ArrayUtilsMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Uint256ArrayUtilsMock>;
    getContractAt(
      name: "UnitConversionUtilsMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UnitConversionUtilsMock>;
    getContractAt(
      name: "AMMSplitter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AMMSplitter>;
    getContractAt(
      name: "AssetLimitHook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AssetLimitHook>;
    getContractAt(
      name: "ERC20Viewer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Viewer>;
    getContractAt(
      name: "PerpV2LeverageModuleViewer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2LeverageModuleViewer>;
    getContractAt(
      name: "ProtocolViewer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProtocolViewer>;
    getContractAt(
      name: "SetTokenViewer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SetTokenViewer>;
    getContractAt(
      name: "StreamingFeeModuleViewer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StreamingFeeModuleViewer>;
    getContractAt(
      name: "Controller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Controller>;
    getContractAt(
      name: "UniswapV2AmmAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2AmmAdapter>;
    getContractAt(
      name: "CompClaimAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompClaimAdapter>;
    getContractAt(
      name: "KyberExchangeAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KyberExchangeAdapter>;
    getContractAt(
      name: "OneInchExchangeAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OneInchExchangeAdapter>;
    getContractAt(
      name: "SynthetixExchangeAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SynthetixExchangeAdapter>;
    getContractAt(
      name: "UniswapV2ExchangeAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2ExchangeAdapter>;
    getContractAt(
      name: "UniswapV2ExchangeAdapterV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2ExchangeAdapterV2>;
    getContractAt(
      name: "UniswapV3ExchangeAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3ExchangeAdapter>;
    getContractAt(
      name: "ZeroExApiAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZeroExApiAdapter>;
    getContractAt(
      name: "AaveGovernanceV2Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveGovernanceV2Adapter>;
    getContractAt(
      name: "CompoundBravoGovernanceAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundBravoGovernanceAdapter>;
    getContractAt(
      name: "CompoundLikeGovernanceAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundLikeGovernanceAdapter>;
    getContractAt(
      name: "SnapshotGovernanceAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SnapshotGovernanceAdapter>;
    getContractAt(
      name: "BalancerV1IndexExchangeAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerV1IndexExchangeAdapter>;
    getContractAt(
      name: "KyberV3IndexExchangeAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KyberV3IndexExchangeAdapter>;
    getContractAt(
      name: "UniswapV2IndexExchangeAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2IndexExchangeAdapter>;
    getContractAt(
      name: "UniswapV3IndexExchangeAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3IndexExchangeAdapter>;
    getContractAt(
      name: "AaveV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2>;
    getContractAt(
      name: "Compound",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Compound>;
    getContractAt(
      name: "PerpV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2>;
    getContractAt(
      name: "PerpV2LibraryV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2LibraryV2>;
    getContractAt(
      name: "PerpV2Positions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2Positions>;
    getContractAt(
      name: "CTokenOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CTokenOracle>;
    getContractAt(
      name: "UniswapPairPriceAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapPairPriceAdapter>;
    getContractAt(
      name: "YearnVaultOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YearnVaultOracle>;
    getContractAt(
      name: "CurveStakingAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveStakingAdapter>;
    getContractAt(
      name: "UniswapV2TransferFeeExchangeAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2TransferFeeExchangeAdapter>;
    getContractAt(
      name: "AaveV2WrapV2Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2WrapV2Adapter>;
    getContractAt(
      name: "CompoundWrapV2Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundWrapV2Adapter>;
    getContractAt(
      name: "YearnWrapV2Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YearnWrapV2Adapter>;
    getContractAt(
      name: "IntegrationRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IntegrationRegistry>;
    getContractAt(
      name: "ModuleBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleBase>;
    getContractAt(
      name: "ModuleBaseV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleBaseV2>;
    getContractAt(
      name: "PositionV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionV2>;
    getContractAt(
      name: "SetTokenAccessible",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SetTokenAccessible>;
    getContractAt(
      name: "AaveLeverageModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveLeverageModule>;
    getContractAt(
      name: "AirdropModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AirdropModule>;
    getContractAt(
      name: "AmmModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AmmModule>;
    getContractAt(
      name: "BasicIssuanceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicIssuanceModule>;
    getContractAt(
      name: "ClaimModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaimModule>;
    getContractAt(
      name: "CompoundLeverageModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundLeverageModule>;
    getContractAt(
      name: "CustomOracleNavIssuanceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CustomOracleNavIssuanceModule>;
    getContractAt(
      name: "DebtIssuanceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DebtIssuanceModule>;
    getContractAt(
      name: "DebtIssuanceModuleV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DebtIssuanceModuleV2>;
    getContractAt(
      name: "GeneralIndexModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GeneralIndexModule>;
    getContractAt(
      name: "GovernanceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceModule>;
    getContractAt(
      name: "IssuanceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IssuanceModule>;
    getContractAt(
      name: "SingleIndexModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SingleIndexModule>;
    getContractAt(
      name: "SlippageIssuanceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlippageIssuanceModule>;
    getContractAt(
      name: "StakingModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingModule>;
    getContractAt(
      name: "StreamingFeeModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StreamingFeeModule>;
    getContractAt(
      name: "TradeModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TradeModule>;
    getContractAt(
      name: "WrapModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrapModule>;
    getContractAt(
      name: "WrapModuleV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrapModuleV2>;
    getContractAt(
      name: "PerpV2BasisTradingModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2BasisTradingModule>;
    getContractAt(
      name: "PerpV2LeverageModuleV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2LeverageModuleV2>;
    getContractAt(
      name: "PriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceOracle>;
    getContractAt(
      name: "SetToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SetToken>;
    getContractAt(
      name: "SetTokenCreator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SetTokenCreator>;
    getContractAt(
      name: "SetValuer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SetValuer>;
    getContractAt(
      name: "BaseStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseStrategy>;
    getContractAt(
      name: "BaseStrategyInitializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseStrategyInitializable>;
    getContractAt(
      name: "StrategyAPI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StrategyAPI>;
    getContractAt(
      name: "VaultAPI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultAPI>;
    getContractAt(
      name: "AaveGovernanceV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveGovernanceV2>;
    getContractAt(
      name: "AaveTokenV2Mintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveTokenV2Mintable>;
    getContractAt(
      name: "AaveV2AToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2AToken>;
    getContractAt(
      name: "AaveV2DefaultReserveInterestRateStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2DefaultReserveInterestRateStrategy>;
    getContractAt(
      name: "AaveV2LendingPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2LendingPool>;
    getContractAt(
      name: "AaveV2LendingPoolAddressesProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2LendingPoolAddressesProvider>;
    getContractAt(
      name: "AaveV2LendingPoolCollateralManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2LendingPoolCollateralManager>;
    getContractAt(
      name: "AaveV2LendingPoolConfigurator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2LendingPoolConfigurator>;
    getContractAt(
      name: "AaveV2LendingRateOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2LendingRateOracle>;
    getContractAt(
      name: "AaveV2Oracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2Oracle>;
    getContractAt(
      name: "AaveV2PriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2PriceOracle>;
    getContractAt(
      name: "AaveV2ProtocolDataProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2ProtocolDataProvider>;
    getContractAt(
      name: "AaveV2StableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2StableDebtToken>;
    getContractAt(
      name: "AaveV2StakedTokenIncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2StakedTokenIncentivesController>;
    getContractAt(
      name: "AaveV2VariableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveV2VariableDebtToken>;
    getContractAt(
      name: "Executor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Executor>;
    getContractAt(
      name: "GovernanceStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceStrategy>;
    getContractAt(
      name: "GenericLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GenericLogic>;
    getContractAt(
      name: "ReserveLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveLogic>;
    getContractAt(
      name: "ValidationLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidationLogic>;
    getContractAt(
      name: "BFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BFactory>;
    getContractAt(
      name: "BPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BPool>;
    getContractAt(
      name: "BRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BRegistry>;
    getContractAt(
      name: "ExchangeProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExchangeProxy>;
    getContractAt(
      name: "CERc20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CERc20>;
    getContractAt(
      name: "CEther",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CEther>;
    getContractAt(
      name: "Comp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Comp>;
    getContractAt(
      name: "CompoundGovernorAlpha",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundGovernorAlpha>;
    getContractAt(
      name: "CompoundGovernorBravoDelegate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundGovernorBravoDelegate>;
    getContractAt(
      name: "CompoundGovernorBravoDelegator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundGovernorBravoDelegator>;
    getContractAt(
      name: "CompoundTimelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundTimelock>;
    getContractAt(
      name: "Comptroller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Comptroller>;
    getContractAt(
      name: "PriceOracleProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceOracleProxy>;
    getContractAt(
      name: "Unitroller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Unitroller>;
    getContractAt(
      name: "WhitePaperInterestRateModel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhitePaperInterestRateModel>;
    getContractAt(
      name: "CRVToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CRVToken>;
    getContractAt(
      name: "CurveDeposit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveDeposit>;
    getContractAt(
      name: "CurvePoolERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurvePoolERC20>;
    getContractAt(
      name: "GaugeController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GaugeController>;
    getContractAt(
      name: "LiquidityGauge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityGauge>;
    getContractAt(
      name: "LiquidityGaugeReward",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityGaugeReward>;
    getContractAt(
      name: "Minter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Minter>;
    getContractAt(
      name: "Stableswap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Stableswap>;
    getContractAt(
      name: "DMMFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DMMFactory>;
    getContractAt(
      name: "DMMPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DMMPool>;
    getContractAt(
      name: "DMMRouter02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DMMRouter02>;
    getContractAt(
      name: "KyberNetworkTokenV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KyberNetworkTokenV2>;
    getContractAt(
      name: "PerpV2AccountBalance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2AccountBalance>;
    getContractAt(
      name: "PerpV2BaseToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2BaseToken>;
    getContractAt(
      name: "PerpV2ChainlinkPriceFeed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2ChainlinkPriceFeed>;
    getContractAt(
      name: "PerpV2ClearingHouse",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2ClearingHouse>;
    getContractAt(
      name: "PerpV2ClearingHouseConfig",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2ClearingHouseConfig>;
    getContractAt(
      name: "PerpV2Exchange",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2Exchange>;
    getContractAt(
      name: "PerpV2InsuranceFund",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2InsuranceFund>;
    getContractAt(
      name: "PerpV2MarketRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2MarketRegistry>;
    getContractAt(
      name: "PerpV2OrderBook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2OrderBook>;
    getContractAt(
      name: "PerpV2Quoter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2Quoter>;
    getContractAt(
      name: "PerpV2QuoteToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2QuoteToken>;
    getContractAt(
      name: "PerpV2TestAggregatorV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2TestAggregatorV3>;
    getContractAt(
      name: "PerpV2Vault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2Vault>;
    getContractAt(
      name: "PerpV2VirtualToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpV2VirtualToken>;
    getContractAt(
      name: "DelegateRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegateRegistry>;
    getContractAt(
      name: "StakingRewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingRewards>;
    getContractAt(
      name: "Uni",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Uni>;
    getContractAt(
      name: "UniswapGovernorAlpha",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapGovernorAlpha>;
    getContractAt(
      name: "UniswapTimelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapTimelock>;
    getContractAt(
      name: "UniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Factory>;
    getContractAt(
      name: "UniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Pair>;
    getContractAt(
      name: "UniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Router02>;
    getContractAt(
      name: "NFTDescriptor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTDescriptor>;
    getContractAt(
      name: "NonfungiblePositionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NonfungiblePositionManager>;
    getContractAt(
      name: "Quoter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Quoter>;
    getContractAt(
      name: "SwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapRouter>;
    getContractAt(
      name: "UniswapV3Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3Factory>;
    getContractAt(
      name: "UniswapV3Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3Pool>;
    getContractAt(
      name: "WETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;
    getContractAt(
      name: "Registry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Registry>;
    getContractAt(
      name: "Vault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vault>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
