/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SetTokenAccessibleInterface extends utils.Interface {
  functions: {
    "allowedSetTokens(address)": FunctionFragment;
    "anySetAllowed()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAllowedSetToken(address,bool)": FunctionFragment;
    "updateAnySetAllowed(bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowedSetTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "anySetAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllowedSetToken",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAnySetAllowed",
    values: [boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowedSetTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anySetAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllowedSetToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAnySetAllowed",
    data: BytesLike
  ): Result;

  events: {
    "AnySetAllowedUpdated(bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetTokenStatusUpdated(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnySetAllowedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenStatusUpdated"): EventFragment;
}

export type AnySetAllowedUpdatedEvent = TypedEvent<
  [boolean],
  { _anySetAllowed: boolean }
>;

export type AnySetAllowedUpdatedEventFilter = TypedEventFilter<AnySetAllowedUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export type SetTokenStatusUpdatedEvent = TypedEvent<
  [string, boolean],
  { _setToken: string; _added: boolean }
>;

export type SetTokenStatusUpdatedEventFilter = TypedEventFilter<SetTokenStatusUpdatedEvent>;

export interface SetTokenAccessible extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SetTokenAccessibleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowedSetTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    anySetAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAllowedSetToken(
      _setToken: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAnySetAllowed(
      _anySetAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowedSetTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  anySetAllowed(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAllowedSetToken(
    _setToken: string,
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAnySetAllowed(
    _anySetAllowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowedSetTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    anySetAllowed(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAllowedSetToken(
      _setToken: string,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAnySetAllowed(
      _anySetAllowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AnySetAllowedUpdated(bool)"(
      _anySetAllowed?: boolean | null
    ): AnySetAllowedUpdatedEventFilter;
    AnySetAllowedUpdated(
      _anySetAllowed?: boolean | null
    ): AnySetAllowedUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SetTokenStatusUpdated(address,bool)"(
      _setToken?: string | null,
      _added?: boolean | null
    ): SetTokenStatusUpdatedEventFilter;
    SetTokenStatusUpdated(
      _setToken?: string | null,
      _added?: boolean | null
    ): SetTokenStatusUpdatedEventFilter;
  };

  estimateGas: {
    allowedSetTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anySetAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAllowedSetToken(
      _setToken: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAnySetAllowed(
      _anySetAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowedSetTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    anySetAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAllowedSetToken(
      _setToken: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAnySetAllowed(
      _anySetAllowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
