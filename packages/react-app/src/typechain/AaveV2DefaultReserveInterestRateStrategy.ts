/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AaveV2DefaultReserveInterestRateStrategyInterface
  extends utils.Interface {
  functions: {
    "EXCESS_UTILIZATION_RATE()": FunctionFragment;
    "OPTIMAL_UTILIZATION_RATE()": FunctionFragment;
    "addressesProvider()": FunctionFragment;
    "baseVariableBorrowRate()": FunctionFragment;
    "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getMaxVariableBorrowRate()": FunctionFragment;
    "stableRateSlope1()": FunctionFragment;
    "stableRateSlope2()": FunctionFragment;
    "variableRateSlope1()": FunctionFragment;
    "variableRateSlope2()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EXCESS_UTILIZATION_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPTIMAL_UTILIZATION_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseVariableBorrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInterestRates",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxVariableBorrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableRateSlope1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableRateSlope2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "variableRateSlope1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "variableRateSlope2",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "EXCESS_UTILIZATION_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPTIMAL_UTILIZATION_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseVariableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterestRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxVariableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableRateSlope1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableRateSlope2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "variableRateSlope1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "variableRateSlope2",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AaveV2DefaultReserveInterestRateStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AaveV2DefaultReserveInterestRateStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EXCESS_UTILIZATION_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    OPTIMAL_UTILIZATION_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addressesProvider(overrides?: CallOverrides): Promise<[string]>;

    baseVariableBorrowRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      reserve: string,
      aToken: string,
      liquidityAdded: BigNumberish,
      liquidityTaken: BigNumberish,
      totalStableDebt: BigNumberish,
      totalVariableDebt: BigNumberish,
      averageStableBorrowRate: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)"(
      reserve: string,
      availableLiquidity: BigNumberish,
      totalStableDebt: BigNumberish,
      totalVariableDebt: BigNumberish,
      averageStableBorrowRate: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getMaxVariableBorrowRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    stableRateSlope1(overrides?: CallOverrides): Promise<[BigNumber]>;

    stableRateSlope2(overrides?: CallOverrides): Promise<[BigNumber]>;

    variableRateSlope1(overrides?: CallOverrides): Promise<[BigNumber]>;

    variableRateSlope2(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  EXCESS_UTILIZATION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  OPTIMAL_UTILIZATION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  addressesProvider(overrides?: CallOverrides): Promise<string>;

  baseVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

  "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
    reserve: string,
    aToken: string,
    liquidityAdded: BigNumberish,
    liquidityTaken: BigNumberish,
    totalStableDebt: BigNumberish,
    totalVariableDebt: BigNumberish,
    averageStableBorrowRate: BigNumberish,
    reserveFactor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)"(
    reserve: string,
    availableLiquidity: BigNumberish,
    totalStableDebt: BigNumberish,
    totalVariableDebt: BigNumberish,
    averageStableBorrowRate: BigNumberish,
    reserveFactor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getMaxVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

  stableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

  stableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

  variableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

  variableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    EXCESS_UTILIZATION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    OPTIMAL_UTILIZATION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<string>;

    baseVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      reserve: string,
      aToken: string,
      liquidityAdded: BigNumberish,
      liquidityTaken: BigNumberish,
      totalStableDebt: BigNumberish,
      totalVariableDebt: BigNumberish,
      averageStableBorrowRate: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)"(
      reserve: string,
      availableLiquidity: BigNumberish,
      totalStableDebt: BigNumberish,
      totalVariableDebt: BigNumberish,
      averageStableBorrowRate: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getMaxVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    stableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    stableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

    variableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    variableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    EXCESS_UTILIZATION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    OPTIMAL_UTILIZATION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    baseVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      reserve: string,
      aToken: string,
      liquidityAdded: BigNumberish,
      liquidityTaken: BigNumberish,
      totalStableDebt: BigNumberish,
      totalVariableDebt: BigNumberish,
      averageStableBorrowRate: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)"(
      reserve: string,
      availableLiquidity: BigNumberish,
      totalStableDebt: BigNumberish,
      totalVariableDebt: BigNumberish,
      averageStableBorrowRate: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxVariableBorrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    stableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    stableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;

    variableRateSlope1(overrides?: CallOverrides): Promise<BigNumber>;

    variableRateSlope2(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    EXCESS_UTILIZATION_RATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPTIMAL_UTILIZATION_RATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressesProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseVariableBorrowRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateInterestRates(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      reserve: string,
      aToken: string,
      liquidityAdded: BigNumberish,
      liquidityTaken: BigNumberish,
      totalStableDebt: BigNumberish,
      totalVariableDebt: BigNumberish,
      averageStableBorrowRate: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateInterestRates(address,uint256,uint256,uint256,uint256,uint256)"(
      reserve: string,
      availableLiquidity: BigNumberish,
      totalStableDebt: BigNumberish,
      totalVariableDebt: BigNumberish,
      averageStableBorrowRate: BigNumberish,
      reserveFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxVariableBorrowRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableRateSlope1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stableRateSlope2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    variableRateSlope1(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    variableRateSlope2(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
