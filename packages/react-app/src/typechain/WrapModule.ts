/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface WrapModuleInterface extends utils.Interface {
  functions: {
    "controller()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "removeModule()": FunctionFragment;
    "unwrap(address,address,address,uint256,string)": FunctionFragment;
    "unwrapWithEther(address,address,uint256,string)": FunctionFragment;
    "weth()": FunctionFragment;
    "wrap(address,address,address,uint256,string)": FunctionFragment;
    "wrapWithEther(address,address,uint256,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unwrap",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapWithEther",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wrap",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapWithEther",
    values: [string, string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unwrap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unwrapWithEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrapWithEther",
    data: BytesLike
  ): Result;

  events: {
    "ComponentUnwrapped(address,address,address,uint256,uint256,string)": EventFragment;
    "ComponentWrapped(address,address,address,uint256,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ComponentUnwrapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComponentWrapped"): EventFragment;
}

export type ComponentUnwrappedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string],
  {
    _setToken: string;
    _underlyingToken: string;
    _wrappedToken: string;
    _underlyingQuantity: BigNumber;
    _wrappedQuantity: BigNumber;
    _integrationName: string;
  }
>;

export type ComponentUnwrappedEventFilter = TypedEventFilter<ComponentUnwrappedEvent>;

export type ComponentWrappedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string],
  {
    _setToken: string;
    _underlyingToken: string;
    _wrappedToken: string;
    _underlyingQuantity: BigNumber;
    _wrappedQuantity: BigNumber;
    _integrationName: string;
  }
>;

export type ComponentWrappedEventFilter = TypedEventFilter<ComponentWrappedEvent>;

export interface WrapModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WrapModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    controller(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwrap(
      _setToken: string,
      _underlyingToken: string,
      _wrappedToken: string,
      _wrappedUnits: BigNumberish,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwrapWithEther(
      _setToken: string,
      _wrappedToken: string,
      _wrappedUnits: BigNumberish,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    wrap(
      _setToken: string,
      _underlyingToken: string,
      _wrappedToken: string,
      _underlyingUnits: BigNumberish,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapWithEther(
      _setToken: string,
      _wrappedToken: string,
      _underlyingUnits: BigNumberish,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  controller(overrides?: CallOverrides): Promise<string>;

  initialize(
    _setToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeModule(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwrap(
    _setToken: string,
    _underlyingToken: string,
    _wrappedToken: string,
    _wrappedUnits: BigNumberish,
    _integrationName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwrapWithEther(
    _setToken: string,
    _wrappedToken: string,
    _wrappedUnits: BigNumberish,
    _integrationName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  wrap(
    _setToken: string,
    _underlyingToken: string,
    _wrappedToken: string,
    _underlyingUnits: BigNumberish,
    _integrationName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapWithEther(
    _setToken: string,
    _wrappedToken: string,
    _underlyingUnits: BigNumberish,
    _integrationName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    controller(overrides?: CallOverrides): Promise<string>;

    initialize(_setToken: string, overrides?: CallOverrides): Promise<void>;

    removeModule(overrides?: CallOverrides): Promise<void>;

    unwrap(
      _setToken: string,
      _underlyingToken: string,
      _wrappedToken: string,
      _wrappedUnits: BigNumberish,
      _integrationName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unwrapWithEther(
      _setToken: string,
      _wrappedToken: string,
      _wrappedUnits: BigNumberish,
      _integrationName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;

    wrap(
      _setToken: string,
      _underlyingToken: string,
      _wrappedToken: string,
      _underlyingUnits: BigNumberish,
      _integrationName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wrapWithEther(
      _setToken: string,
      _wrappedToken: string,
      _underlyingUnits: BigNumberish,
      _integrationName: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ComponentUnwrapped(address,address,address,uint256,uint256,string)"(
      _setToken?: string | null,
      _underlyingToken?: string | null,
      _wrappedToken?: string | null,
      _underlyingQuantity?: null,
      _wrappedQuantity?: null,
      _integrationName?: null
    ): ComponentUnwrappedEventFilter;
    ComponentUnwrapped(
      _setToken?: string | null,
      _underlyingToken?: string | null,
      _wrappedToken?: string | null,
      _underlyingQuantity?: null,
      _wrappedQuantity?: null,
      _integrationName?: null
    ): ComponentUnwrappedEventFilter;

    "ComponentWrapped(address,address,address,uint256,uint256,string)"(
      _setToken?: string | null,
      _underlyingToken?: string | null,
      _wrappedToken?: string | null,
      _underlyingQuantity?: null,
      _wrappedQuantity?: null,
      _integrationName?: null
    ): ComponentWrappedEventFilter;
    ComponentWrapped(
      _setToken?: string | null,
      _underlyingToken?: string | null,
      _wrappedToken?: string | null,
      _underlyingQuantity?: null,
      _wrappedQuantity?: null,
      _integrationName?: null
    ): ComponentWrappedEventFilter;
  };

  estimateGas: {
    controller(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwrap(
      _setToken: string,
      _underlyingToken: string,
      _wrappedToken: string,
      _wrappedUnits: BigNumberish,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwrapWithEther(
      _setToken: string,
      _wrappedToken: string,
      _wrappedUnits: BigNumberish,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    wrap(
      _setToken: string,
      _underlyingToken: string,
      _wrappedToken: string,
      _underlyingUnits: BigNumberish,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapWithEther(
      _setToken: string,
      _wrappedToken: string,
      _underlyingUnits: BigNumberish,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwrap(
      _setToken: string,
      _underlyingToken: string,
      _wrappedToken: string,
      _wrappedUnits: BigNumberish,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwrapWithEther(
      _setToken: string,
      _wrappedToken: string,
      _wrappedUnits: BigNumberish,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrap(
      _setToken: string,
      _underlyingToken: string,
      _wrappedToken: string,
      _underlyingUnits: BigNumberish,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapWithEther(
      _setToken: string,
      _wrappedToken: string,
      _underlyingUnits: BigNumberish,
      _integrationName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
