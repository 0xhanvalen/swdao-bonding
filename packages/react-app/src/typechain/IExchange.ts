/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IExchangeInterface extends utils.Interface {
  functions: {
    "getAllPendingFundingPayment(address)": FunctionFragment;
    "getMaxTickCrossedWithinBlock(address)": FunctionFragment;
    "getPendingFundingPayment(address,address)": FunctionFragment;
    "getPool(address)": FunctionFragment;
    "getSqrtMarkTwapX96(address,uint32)": FunctionFragment;
    "getTick(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAllPendingFundingPayment",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxTickCrossedWithinBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingFundingPayment",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getSqrtMarkTwapX96",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getTick", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "getAllPendingFundingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxTickCrossedWithinBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingFundingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSqrtMarkTwapX96",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTick", data: BytesLike): Result;

  events: {};
}

export interface IExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllPendingFundingPayment(
      trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxTickCrossedWithinBlock(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getPendingFundingPayment(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPool(baseToken: string, overrides?: CallOverrides): Promise<[string]>;

    getSqrtMarkTwapX96(
      baseToken: string,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTick(baseToken: string, overrides?: CallOverrides): Promise<[number]>;
  };

  getAllPendingFundingPayment(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxTickCrossedWithinBlock(
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getPendingFundingPayment(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPool(baseToken: string, overrides?: CallOverrides): Promise<string>;

  getSqrtMarkTwapX96(
    baseToken: string,
    twapInterval: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTick(baseToken: string, overrides?: CallOverrides): Promise<number>;

  callStatic: {
    getAllPendingFundingPayment(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxTickCrossedWithinBlock(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getPendingFundingPayment(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPool(baseToken: string, overrides?: CallOverrides): Promise<string>;

    getSqrtMarkTwapX96(
      baseToken: string,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTick(baseToken: string, overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    getAllPendingFundingPayment(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxTickCrossedWithinBlock(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingFundingPayment(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPool(baseToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    getSqrtMarkTwapX96(
      baseToken: string,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTick(baseToken: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllPendingFundingPayment(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxTickCrossedWithinBlock(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingFundingPayment(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPool(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSqrtMarkTwapX96(
      baseToken: string,
      twapInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTick(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
