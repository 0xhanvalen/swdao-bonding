/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface UniswapV3ExchangeAdapterInterface extends utils.Interface {
  functions: {
    "generateDataParam(address[],uint24[])": FunctionFragment;
    "getSpender()": FunctionFragment;
    "getTradeCalldata(address,address,address,uint256,uint256,bytes)": FunctionFragment;
    "swapRouter()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "generateDataParam",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeCalldata",
    values: [string, string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "generateDataParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSpender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTradeCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;

  events: {};
}

export interface UniswapV3ExchangeAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapV3ExchangeAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    generateDataParam(
      _path: string[],
      _fees: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSpender(overrides?: CallOverrides): Promise<[string]>;

    getTradeCalldata(
      _sourceToken: string,
      _destinationToken: string,
      _destinationAddress: string,
      _sourceQuantity: BigNumberish,
      _minDestinationQuantity: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;
  };

  generateDataParam(
    _path: string[],
    _fees: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<string>;

  getSpender(overrides?: CallOverrides): Promise<string>;

  getTradeCalldata(
    _sourceToken: string,
    _destinationToken: string,
    _destinationAddress: string,
    _sourceQuantity: BigNumberish,
    _minDestinationQuantity: BigNumberish,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    generateDataParam(
      _path: string[],
      _fees: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    getSpender(overrides?: CallOverrides): Promise<string>;

    getTradeCalldata(
      _sourceToken: string,
      _destinationToken: string,
      _destinationAddress: string,
      _sourceQuantity: BigNumberish,
      _minDestinationQuantity: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    swapRouter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    generateDataParam(
      _path: string[],
      _fees: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpender(overrides?: CallOverrides): Promise<BigNumber>;

    getTradeCalldata(
      _sourceToken: string,
      _destinationToken: string,
      _destinationAddress: string,
      _sourceQuantity: BigNumberish,
      _minDestinationQuantity: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    generateDataParam(
      _path: string[],
      _fees: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTradeCalldata(
      _sourceToken: string,
      _destinationToken: string,
      _destinationAddress: string,
      _sourceQuantity: BigNumberish,
      _minDestinationQuantity: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
