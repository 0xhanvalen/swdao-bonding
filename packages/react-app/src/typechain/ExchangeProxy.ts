/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type SwapStruct = {
  pool: string;
  tokenIn: string;
  tokenOut: string;
  swapAmount: BigNumberish;
  limitReturnAmount: BigNumberish;
  maxPrice: BigNumberish;
};

export type SwapStructOutput = [
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  pool: string;
  tokenIn: string;
  tokenOut: string;
  swapAmount: BigNumber;
  limitReturnAmount: BigNumber;
  maxPrice: BigNumber;
};

export interface ExchangeProxyInterface extends utils.Interface {
  functions: {
    "batchSwapExactIn((address,address,address,uint256,uint256,uint256)[],address,address,uint256,uint256)": FunctionFragment;
    "batchSwapExactOut((address,address,address,uint256,uint256,uint256)[],address,address,uint256)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "multihopBatchSwapExactIn(tuple[][],address,address,uint256,uint256)": FunctionFragment;
    "multihopBatchSwapExactOut(tuple[][],address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "smartSwapExactIn(address,address,uint256,uint256,uint256)": FunctionFragment;
    "smartSwapExactOut(address,address,uint256,uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "viewSplitExactIn(address,address,uint256,uint256)": FunctionFragment;
    "viewSplitExactOut(address,address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchSwapExactIn",
    values: [SwapStruct[], string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSwapExactOut",
    values: [SwapStruct[], string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multihopBatchSwapExactIn",
    values: [SwapStruct[], string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multihopBatchSwapExactOut",
    values: [SwapStruct[], string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setRegistry", values: [string]): string;
  encodeFunctionData(
    functionFragment: "smartSwapExactIn",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "smartSwapExactOut",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewSplitExactIn",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewSplitExactOut",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSwapExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multihopBatchSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multihopBatchSwapExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "smartSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "smartSwapExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewSplitExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewSplitExactOut",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface ExchangeProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExchangeProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchSwapExactIn(
      swaps: SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchSwapExactOut(
      swaps: SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    multihopBatchSwapExactIn(
      swapSequences: SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multihopBatchSwapExactOut(
      swapSequences: SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    smartSwapExactIn(
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      nPools: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    smartSwapExactOut(
      tokenIn: string,
      tokenOut: string,
      totalAmountOut: BigNumberish,
      maxTotalAmountIn: BigNumberish,
      nPools: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewSplitExactIn(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [SwapStructOutput[], BigNumber] & {
        swaps: SwapStructOutput[];
        totalOutput: BigNumber;
      }
    >;

    viewSplitExactOut(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [SwapStructOutput[], BigNumber] & {
        swaps: SwapStructOutput[];
        totalOutput: BigNumber;
      }
    >;
  };

  batchSwapExactIn(
    swaps: SwapStruct[],
    tokenIn: string,
    tokenOut: string,
    totalAmountIn: BigNumberish,
    minTotalAmountOut: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchSwapExactOut(
    swaps: SwapStruct[],
    tokenIn: string,
    tokenOut: string,
    maxTotalAmountIn: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  multihopBatchSwapExactIn(
    swapSequences: SwapStruct[],
    tokenIn: string,
    tokenOut: string,
    totalAmountIn: BigNumberish,
    minTotalAmountOut: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multihopBatchSwapExactOut(
    swapSequences: SwapStruct[],
    tokenIn: string,
    tokenOut: string,
    maxTotalAmountIn: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRegistry(
    _registry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  smartSwapExactIn(
    tokenIn: string,
    tokenOut: string,
    totalAmountIn: BigNumberish,
    minTotalAmountOut: BigNumberish,
    nPools: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  smartSwapExactOut(
    tokenIn: string,
    tokenOut: string,
    totalAmountOut: BigNumberish,
    maxTotalAmountIn: BigNumberish,
    nPools: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewSplitExactIn(
    tokenIn: string,
    tokenOut: string,
    swapAmount: BigNumberish,
    nPools: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [SwapStructOutput[], BigNumber] & {
      swaps: SwapStructOutput[];
      totalOutput: BigNumber;
    }
  >;

  viewSplitExactOut(
    tokenIn: string,
    tokenOut: string,
    swapAmount: BigNumberish,
    nPools: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [SwapStructOutput[], BigNumber] & {
      swaps: SwapStructOutput[];
      totalOutput: BigNumber;
    }
  >;

  callStatic: {
    batchSwapExactIn(
      swaps: SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchSwapExactOut(
      swaps: SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    multihopBatchSwapExactIn(
      swapSequences: SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multihopBatchSwapExactOut(
      swapSequences: SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setRegistry(_registry: string, overrides?: CallOverrides): Promise<void>;

    smartSwapExactIn(
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    smartSwapExactOut(
      tokenIn: string,
      tokenOut: string,
      totalAmountOut: BigNumberish,
      maxTotalAmountIn: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    viewSplitExactIn(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [SwapStructOutput[], BigNumber] & {
        swaps: SwapStructOutput[];
        totalOutput: BigNumber;
      }
    >;

    viewSplitExactOut(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [SwapStructOutput[], BigNumber] & {
        swaps: SwapStructOutput[];
        totalOutput: BigNumber;
      }
    >;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    batchSwapExactIn(
      swaps: SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchSwapExactOut(
      swaps: SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    multihopBatchSwapExactIn(
      swapSequences: SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multihopBatchSwapExactOut(
      swapSequences: SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    smartSwapExactIn(
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      nPools: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    smartSwapExactOut(
      tokenIn: string,
      tokenOut: string,
      totalAmountOut: BigNumberish,
      maxTotalAmountIn: BigNumberish,
      nPools: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewSplitExactIn(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewSplitExactOut(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchSwapExactIn(
      swaps: SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchSwapExactOut(
      swaps: SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multihopBatchSwapExactIn(
      swapSequences: SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multihopBatchSwapExactOut(
      swapSequences: SwapStruct[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    smartSwapExactIn(
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      nPools: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    smartSwapExactOut(
      tokenIn: string,
      tokenOut: string,
      totalAmountOut: BigNumberish,
      maxTotalAmountIn: BigNumberish,
      nPools: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewSplitExactIn(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewSplitExactOut(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
