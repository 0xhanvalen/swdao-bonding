/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UniswapV3MathMock,
  UniswapV3MathMockInterface,
} from "../UniswapV3MathMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint160",
        name: "_sqrtPriceX96",
        type: "uint160",
      },
    ],
    name: "testFormatSqrtPriceX96ToPriceX96",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_valueX96",
        type: "uint256",
      },
    ],
    name: "testFormatX96ToX10_18",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
    gas: "0x01ba8140",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610204806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806353a9d0801461003b5780638ffd0e9a14610064575b600080fd5b61004e610049366004610186565b610077565b60405161005b91906101c5565b60405180910390f35b61004e6100723660046101ad565b610091565b600061008b826001600160a01b031661009c565b92915050565b600061008b826100b6565b600061008b6001600160a01b03831680600160601b6100ca565b600061008b826100c461017a565b600160601b5b600080806000198587098686029250828110908390030390508061010057600084116100f557600080fd5b508290049050610173565b80841161010c57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b670de0b6b3a764000090565b600060208284031215610197578081fd5b81356001600160a01b0381168114610173578182fd5b6000602082840312156101be578081fd5b5035919050565b9081526020019056fea2646970667358221220d22e1c75c3084363b3f4c1cd782a9b5a29e95e524ea12da972ee53155d44664764736f6c634300060a0033";

type UniswapV3MathMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapV3MathMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapV3MathMock__factory extends ContractFactory {
  constructor(...args: UniswapV3MathMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UniswapV3MathMock> {
    return super.deploy(overrides || {}) as Promise<UniswapV3MathMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): UniswapV3MathMock {
    return super.attach(address) as UniswapV3MathMock;
  }
  connect(signer: Signer): UniswapV3MathMock__factory {
    return super.connect(signer) as UniswapV3MathMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapV3MathMockInterface {
    return new utils.Interface(_abi) as UniswapV3MathMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapV3MathMock {
    return new Contract(address, _abi, signerOrProvider) as UniswapV3MathMock;
  }
}
