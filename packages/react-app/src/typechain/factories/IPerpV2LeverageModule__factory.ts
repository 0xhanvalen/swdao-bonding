/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IPerpV2LeverageModule,
  IPerpV2LeverageModuleInterface,
} from "../IPerpV2LeverageModule";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract ISetToken",
        name: "_setToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "_collateralToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amountDeposited",
        type: "uint256",
      },
    ],
    name: "CollateralDeposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract ISetToken",
        name: "_setToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "_collateralToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amountWithdrawn",
        type: "uint256",
      },
    ],
    name: "CollateralWithdrawn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract ISetToken",
        name: "_setToken",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_baseToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_deltaBase",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_deltaQuote",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_protocolFee",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "_isBuy",
        type: "bool",
      },
    ],
    name: "PerpTraded",
    type: "event",
  },
  {
    inputs: [],
    name: "collateralDecimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [],
    name: "collateralToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "contract ISetToken",
        name: "_setToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_collateralQuantityUnits",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_baseToken",
        type: "address",
      },
    ],
    name: "getAMMSpotPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "contract ISetToken",
        name: "_setToken",
        type: "address",
      },
    ],
    name: "getAccountInfo",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "collateralBalance",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "owedRealizedPnl",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "pendingFundingPayments",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "netQuoteBalance",
            type: "int256",
          },
        ],
        internalType: "struct IPerpV2LeverageModule.AccountInfo",
        name: "accountInfo",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "contract ISetToken",
        name: "_setToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_setTokenQuantity",
        type: "uint256",
      },
    ],
    name: "getIssuanceAdjustments",
    outputs: [
      {
        internalType: "int256[]",
        name: "",
        type: "int256[]",
      },
      {
        internalType: "int256[]",
        name: "",
        type: "int256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "contract ISetToken",
        name: "_setToken",
        type: "address",
      },
    ],
    name: "getPositionNotionalInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "baseToken",
            type: "address",
          },
          {
            internalType: "int256",
            name: "baseBalance",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "quoteBalance",
            type: "int256",
          },
        ],
        internalType: "struct PerpV2Positions.PositionNotionalInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "contract ISetToken",
        name: "_setToken",
        type: "address",
      },
    ],
    name: "getPositionUnitInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "baseToken",
            type: "address",
          },
          {
            internalType: "int256",
            name: "baseUnit",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "quoteUnit",
            type: "int256",
          },
        ],
        internalType: "struct PerpV2Positions.PositionUnitInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "contract ISetToken",
        name: "_setToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_setTokenQuantity",
        type: "uint256",
      },
    ],
    name: "getRedemptionAdjustments",
    outputs: [
      {
        internalType: "int256[]",
        name: "",
        type: "int256[]",
      },
      {
        internalType: "int256[]",
        name: "",
        type: "int256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "contract ISetToken",
        name: "_setToken",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [],
    name: "perpAccountBalance",
    outputs: [
      {
        internalType: "contract IAccountBalance",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [],
    name: "perpClearingHouse",
    outputs: [
      {
        internalType: "contract IClearingHouse",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [],
    name: "perpExchange",
    outputs: [
      {
        internalType: "contract IExchange",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [],
    name: "perpMarketRegistry",
    outputs: [
      {
        internalType: "contract IMarketRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [],
    name: "perpQuoter",
    outputs: [
      {
        internalType: "contract IQuoter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [],
    name: "perpVault",
    outputs: [
      {
        internalType: "contract IVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "contract ISetToken",
        name: "_setToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_baseToken",
        type: "address",
      },
      {
        internalType: "int256",
        name: "_baseQuantityUnits",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "_quoteBoundQuantityUnits",
        type: "uint256",
      },
    ],
    name: "trade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "contract ISetToken",
        name: "_setToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_collateralQuantityUnits",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
    gas: "0x01ba8140",
  },
];

export class IPerpV2LeverageModule__factory {
  static readonly abi = _abi;
  static createInterface(): IPerpV2LeverageModuleInterface {
    return new utils.Interface(_abi) as IPerpV2LeverageModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPerpV2LeverageModule {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IPerpV2LeverageModule;
  }
}
