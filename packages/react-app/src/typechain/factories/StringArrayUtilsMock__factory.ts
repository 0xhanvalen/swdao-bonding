/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StringArrayUtilsMock,
  StringArrayUtilsMockInterface,
} from "../StringArrayUtilsMock";

const _abi = [
  {
    inputs: [],
    name: "getStorageArray",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "A",
        type: "string[]",
      },
    ],
    name: "setStorageArray",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "storageArray",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "A",
        type: "string[]",
      },
      {
        internalType: "string",
        name: "a",
        type: "string",
      },
    ],
    name: "testIndexOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "a",
        type: "string",
      },
    ],
    name: "testRemoveStorage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
    gas: "0x01ba8140",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610990806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630e031ab11461005c57806325cc66f514610085578063a308629b1461009a578063c62eacf8146100bb578063cf663ee0146100d0575b600080fd5b61006f61006a366004610816565b6100e3565b60405161007c91906108db565b60405180910390f35b61008d610189565b60405161007c919061087b565b6100ad6100a8366004610782565b610262565b60405161007c929190610923565b6100ce6100c9366004610747565b610281565b005b6100ce6100de3660046107e3565b610298565b600081815481106100f057fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152935090918301828280156101815780601f1061015657610100808354040283529160200191610181565b820191906000526020600020905b81548152906001019060200180831161016457829003601f168201915b505050505081565b60606000805480602002602001604051908101604052809291908181526020016000905b828210156102585760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156102445780601f1061021957610100808354040283529160200191610244565b820191906000526020600020905b81548152906001019060200180831161022757829003601f168201915b5050505050815260200190600101906101ad565b5050505090505b90565b600080610275848463ffffffff6102ac16565b915091505b9250929050565b805161029490600090602084019061049a565b5050565b6102a960008263ffffffff61030b16565b50565b81516000908190815b818110156102fb5784805190602001208682815181106102d157fe5b60200260200101518051906020012014156102f35792506001915061027a9050565b6001016102b5565b5060001995600095509350505050565b6000806103e784805480602002602001604051908101604052809291908181526020016000905b828210156103dd5760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156103c95780601f1061039e576101008083540402835291602001916103c9565b820191906000526020600020905b8154815290600101906020018083116103ac57829003601f168201915b505050505081526020019060010190610332565b50505050846102ac565b91509150806104115760405162461bcd60e51b8152600401610408906108f5565b60405180910390fd5b83546000190182811461046b5784818154811061042a57fe5b9060005260206000200185848154811061044057fe5b9060005260206000200190805460018160011615610100020316600290046104699291906104f7565b505b8480548061047557fe5b6001900381819060005260206000200160006104919190610578565b90555050505050565b8280548282559060005260206000209081019282156104e7579160200282015b828111156104e757825180516104d79184916020909101906105bc565b50916020019190600101906104ba565b506104f392915061062a565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610530578054855561056c565b8280016001018555821561056c57600052602060002091601f016020900482015b8281111561056c578254825591600101919060010190610551565b506104f392915061064d565b50805460018160011615610100020316600290046000825580601f1061059e57506102a9565b601f0160209004906000526020600020908101906102a9919061064d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105fd57805160ff191683800117855561056c565b8280016001018555821561056c579182015b8281111561056c57825182559160200191906001019061060f565b61025f91905b808211156104f35760006106448282610578565b50600101610630565b61025f91905b808211156104f35760008155600101610653565b600082601f830112610677578081fd5b813567ffffffffffffffff81111561068d578182fd5b602061069c8182840201610933565b828152925080830184820160005b848110156106d3576106c1888584358a01016106de565b835291830191908301906001016106aa565b505050505092915050565b600082601f8301126106ee578081fd5b813567ffffffffffffffff811115610704578182fd5b610717601f8201601f1916602001610933565b915080825283602082850101111561072e57600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215610758578081fd5b813567ffffffffffffffff81111561076e578182fd5b61077a84828501610667565b949350505050565b60008060408385031215610794578081fd5b823567ffffffffffffffff808211156107ab578283fd5b6107b786838701610667565b935060208501359150808211156107cc578283fd5b506107d9858286016106de565b9150509250929050565b6000602082840312156107f4578081fd5b813567ffffffffffffffff81111561080a578182fd5b61077a848285016106de565b600060208284031215610827578081fd5b5035919050565b600081518084526020825b82811015610854578481018201518682018301528101610839565b8281111561086457838284880101525b5080601f19601f8401168601019250505092915050565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156108ce57603f198886030184526108bc85835161082e565b945092850192908501906001016108a0565b5092979650505050505050565b6000602082526108ee602083018461082e565b9392505050565b60208082526014908201527329ba3934b733903737ba1034b71030b93930bc9760611b604082015260600190565b9182521515602082015260400190565b60405181810167ffffffffffffffff8111828210171561095257600080fd5b60405291905056fea26469706673582212205585a2ef2721c7b507b54a1551897505cacc9dfdfe04bc26f006c53e7f3e0fe164736f6c634300060a0033";

type StringArrayUtilsMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StringArrayUtilsMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StringArrayUtilsMock__factory extends ContractFactory {
  constructor(...args: StringArrayUtilsMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StringArrayUtilsMock> {
    return super.deploy(overrides || {}) as Promise<StringArrayUtilsMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): StringArrayUtilsMock {
    return super.attach(address) as StringArrayUtilsMock;
  }
  connect(signer: Signer): StringArrayUtilsMock__factory {
    return super.connect(signer) as StringArrayUtilsMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StringArrayUtilsMockInterface {
    return new utils.Interface(_abi) as StringArrayUtilsMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StringArrayUtilsMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as StringArrayUtilsMock;
  }
}
