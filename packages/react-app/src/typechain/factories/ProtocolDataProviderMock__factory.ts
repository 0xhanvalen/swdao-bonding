/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ProtocolDataProviderMock,
  ProtocolDataProviderMockInterface,
} from "../ProtocolDataProviderMock";

const _abi = [
  {
    inputs: [],
    name: "getAllReservesTokens",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
        ],
        internalType: "struct IProtocolDataProvider.TokenData[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
    gas: "0x01ba8140",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610196806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b316ff8914610030575b600080fd5b61003861004e565b60405161004591906100ac565b60405180910390f35b60408051600080825260208201909252606091610081565b61006e610087565b8152602001906001900390816100665790505b50905090565b60408051808201909152606081526000602082015290565b6001600160a01b03169052565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561015257603f1989840301855281518051878552805180898701528a5b8181101561010d578281018b0151878201606001528a016100f1565b8181111561011e578b606083890101525b508983015191506101318a87018361009f565b96890196601f01601f191694909401606001935050908601906001016100d0565b50909897505050505050505056fea2646970667358221220c712cfd7a3c3fa1394b3a3244c4e463ad2597657ea7706574a09c5d80f28508b64736f6c634300060a0033";

type ProtocolDataProviderMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProtocolDataProviderMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProtocolDataProviderMock__factory extends ContractFactory {
  constructor(...args: ProtocolDataProviderMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ProtocolDataProviderMock> {
    return super.deploy(overrides || {}) as Promise<ProtocolDataProviderMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ProtocolDataProviderMock {
    return super.attach(address) as ProtocolDataProviderMock;
  }
  connect(signer: Signer): ProtocolDataProviderMock__factory {
    return super.connect(signer) as ProtocolDataProviderMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProtocolDataProviderMockInterface {
    return new utils.Interface(_abi) as ProtocolDataProviderMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProtocolDataProviderMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ProtocolDataProviderMock;
  }
}
