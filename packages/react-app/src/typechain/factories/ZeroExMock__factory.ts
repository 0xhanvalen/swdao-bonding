/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ZeroExMock, ZeroExMockInterface } from "../ZeroExMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_mockSendToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_mockReceiveToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_mockSendAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_mockReceiveAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_setTokenAddress",
        type: "address",
      },
    ],
    name: "addSetTokenAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "inputToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "outputToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "sellAmount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "bytes4",
                name: "selector",
                type: "bytes4",
              },
              {
                internalType: "uint256",
                name: "sellAmount",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct ZeroExMock.WrappedBatchCall[]",
            name: "calls",
            type: "tuple[]",
          },
        ],
        internalType: "struct ZeroExMock.BatchFillData",
        name: "",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "batchFill",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [],
    name: "mockReceiveAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [],
    name: "mockReceiveToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [],
    name: "mockSendAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [],
    name: "mockSendToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "sellAmount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "bytes4",
                name: "selector",
                type: "bytes4",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct ZeroExMock.WrappedMultiHopCall[]",
            name: "calls",
            type: "tuple[]",
          },
        ],
        internalType: "struct ZeroExMock.MultiHopFillData",
        name: "",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "multiHopFill",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "subcall",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "sellAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct ZeroExMock.BatchSellSubcall[]",
        name: "",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "multiplexBatchSellTokenForToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "subcall",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct ZeroExMock.MultiHopSellSubcall[]",
        name: "",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "multiplexMultiHopSellTokenForToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "sellToLiquidityProvider",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "sellToUniswap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "sellTokenForTokenToUniswapV3",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [],
    name: "setTokenAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "deploymentNonce",
            type: "uint32",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct ZeroExMock.Transformation[]",
        name: "",
        type: "tuple[]",
      },
    ],
    name: "transformERC20",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
    gas: "0x01ba8140",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "deploymentNonce",
            type: "uint32",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct ZeroExMock.Transformation[]",
        name: "",
        type: "tuple[]",
      },
    ],
    name: "transformERC20Staging",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
    gas: "0x01ba8140",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610edf380380610edf83398101604081905261002f9161008a565b600180546001600160a01b039586166001600160a01b03199182161790915560008054949095169316929092179092556003919091556002556100ce565b80516001600160a01b038116811461008457600080fd5b92915050565b6000806000806080858703121561009f578384fd5b6100a9868661006d565b93506100b8866020870161006d565b6040860151606090960151949790965092505050565b610e02806100dd6000396000f3fe6080604052600436106100e85760003560e01c80637a1eb1b91161008a578063bce3c75111610059578063bce3c751146101e6578063d9627aa4146101fb578063dc00152f14610209578063f7fcd3841461021e576100e8565b80637a1eb1b9146101b0578063800accc2146101c35780638182b61f14610129578063afc6728e146101d8576100e8565b806347485815116100c6578063474858151461013c57806361d97404146101515780636af479b21461017357806375e9141d1461018e576100e8565b80630f3b31b2146100ed57806321c184b614610116578063415565b014610129575b600080fd5b6101006100fb3660046108d9565b610231565b60405161010d9190610d33565b60405180910390f35b610100610124366004610b4e565b610243565b6101006101373660046107f8565b610253565b34801561014857600080fd5b50610100610267565b34801561015d57600080fd5b5061016661026d565b60405161010d9190610c7c565b34801561017f57600080fd5b506101006100fb3660046109ff565b34801561019a57600080fd5b506101ae6101a93660046105e2565b61027c565b005b6101006101be3660046106cf565b61029e565b3480156101cf57600080fd5b506101006102b1565b610100610124366004610a5f565b3480156101f257600080fd5b506101666102b7565b6101006101be366004610871565b34801561021557600080fd5b506101666102c6565b61010061022c366004610605565b6102d5565b600061023b6102eb565b949350505050565b600061024d6102eb565b92915050565b600061025d6102eb565b9695505050505050565b60025481565b6001546001600160a01b031681565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b60006102a86102eb565b95945050505050565b60035481565b6000546001600160a01b031681565b6004546001600160a01b031681565b60006102df6102eb565b98975050505050505050565b600154600480546003546040516323b872dd60e01b81526001600160a01b03948516946323b872dd9461032694909116923092909101610c90565b602060405180830381600087803b15801561034057600080fd5b505af1158015610354573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037891906109e3565b61039d5760405162461bcd60e51b815260040161039490610cfc565b60405180910390fd5b6000546004805460025460405163a9059cbb60e01b81526001600160a01b039485169463a9059cbb946103d594909116929101610cb4565b602060405180830381600087803b1580156103ef57600080fd5b505af1158015610403573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042791906109e3565b6104435760405162461bcd60e51b815260040161039490610ccd565b565b60008083601f840112610456578182fd5b5081356001600160401b0381111561046c578182fd5b602083019150836020808302850101111561048657600080fd5b9250929050565b600082601f83011261049d578081fd5b81356104b06104ab82610d62565b610d3c565b8181529150602080830190848101818402860182018710156104d157600080fd5b60005b848110156104f95781356104e781610d81565b845292820192908201906001016104d4565b505050505092915050565b600082601f830112610514578081fd5b81356001600160401b03811115610529578182fd5b61053c601f8201601f1916602001610d3c565b915080825283602082850101111561055357600080fd5b8060208401602084013760009082016020015292915050565b60006060828403121561057d578081fd5b6105876060610d3c565b9050813561059481610da7565b81526020828101359082015260408201356001600160401b038111156105b957600080fd5b6105c584828501610504565b60408301525092915050565b803560ff8116811461024d57600080fd5b6000602082840312156105f3578081fd5b81356105fe81610d81565b9392505050565b60008060008060008060008060e0898b031215610620578384fd5b883561062b81610d81565b9750602089013561063b81610d81565b9650604089013561064b81610d81565b9550606089013561065b81610d81565b94506080890135935060a0890135925060c08901356001600160401b0380821115610684578384fd5b818b018c601f820112610695578485fd5b80359250818311156106a5578485fd5b8c60208483010111156106b6578485fd5b6020810194505050809150509295985092959890939650565b600080600080600060a086880312156106e6578283fd5b6106f08635610d81565b853594506107016020870135610d81565b602086013593506001600160401b036040870135111561071f578283fd5b6040860135860187601f820112610734578384fd5b6107416104ab8235610d62565b81358152602080820191908301865b84358110156107dd57813585016060818e03601f19011215610770578889fd5b61077a6060610d3c565b6107876020830135610dbd565b60208201358152604082013560208201526001600160401b03606083013511156107af57898afd5b6107c28e60206060850135850101610504565b60408201528552506020938401939190910190600101610750565b50979a96995097606081013597506080013595945050505050565b60008060008060008060a08789031215610810578384fd5b863561081b81610d81565b9550602087013561082b81610d81565b9450604087013593506060870135925060808701356001600160401b03811115610853578283fd5b61085f89828a01610445565b979a9699509497509295939492505050565b600080600080600060808688031215610888578283fd5b85356001600160401b0381111561089d578384fd5b6108a988828901610445565b909650945050602086013592506040860135915060608601356108cb81610d99565b809150509295509295909350565b600080600080608085870312156108ee578182fd5b6001600160401b038086351115610903578283fd5b610910878735880161048d565b9450602086013581811115610923578384fd5b80870188601f820112610934578485fd5b6109416104ab8235610d62565b81358152602080820193508201865b83358110156109c857813584016040818e03601f19011215610970578889fd5b61097a6040610d3c565b6109878e602084016105d1565b815260408201358881111561099a578a8bfd5b6109a98f602083860101610504565b6020838101919091529188525095860195929092019150600101610950565b50979a90995060408901359860600135975095505050505050565b6000602082840312156109f4578081fd5b81516105fe81610d99565b60008060008060808587031215610a14578182fd5b84356001600160401b03811115610a29578283fd5b610a3587828801610504565b94505060208501359250604085013591506060850135610a5481610d81565b939692955090935050565b60008060408385031215610a71578182fd5b82356001600160401b0380821115610a87578384fd5b81850160808188031215610a99578485fd5b610aa36080610d3c565b92508035610ab081610d81565b8352602081810135610ac181610d81565b8482015260408281013590850152606082013583811115610ae0578687fd5b82019250601f83018813610af2578586fd5b82359150610b026104ab83610d62565b82815281810190848301885b85811015610b3757610b258c8684358a010161056c565b84529284019290840190600101610b0e565b505060608601525092979590920135955050505050565b60008060408385031215610b60578182fd5b6001600160401b038084351115610b75578283fd5b8335840160608187031215610b88578384fd5b610b926060610d3c565b8282351115610b9f578485fd5b610bac878335840161048d565b815260208083013581830152604083013584811115610bc9578687fd5b80840189601f820112610bda578788fd5b610be76104ab8235610d62565b8135815283810195509150828101885b8235811015610c6757813583016040818e03601f19011215610c17578a8bfd5b610c216040610d3c565b86820135610c2e81610da7565b815260408201358a811115610c41578c8dfd5b610c4f8f8983860101610504565b82890152508852509584019590840190600101610bf7565b50505060408301529097950135955050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b602080825260159082015274115490cc8c081d1c985b9cd9995c8819985a5b1959605a1b604082015260600190565b60208082526019908201527f4552433230205472616e7366657246726f6d206661696c656400000000000000604082015260600190565b90815260200190565b6040518181016001600160401b0381118282101715610d5a57600080fd5b604052919050565b60006001600160401b03821115610d77578081fd5b5060209081020190565b6001600160a01b0381168114610d9657600080fd5b50565b8015158114610d9657600080fd5b6001600160e01b031981168114610d9657600080fd5b60ff81168114610d9657600080fdfea264697066735822122075ef15239e4b6937ec93e911f3b9744373d530c5c0f1a72cc3229ac09c68c1e564736f6c634300060a0033";

type ZeroExMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZeroExMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZeroExMock__factory extends ContractFactory {
  constructor(...args: ZeroExMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _mockSendToken: string,
    _mockReceiveToken: string,
    _mockSendAmount: BigNumberish,
    _mockReceiveAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ZeroExMock> {
    return super.deploy(
      _mockSendToken,
      _mockReceiveToken,
      _mockSendAmount,
      _mockReceiveAmount,
      overrides || {}
    ) as Promise<ZeroExMock>;
  }
  getDeployTransaction(
    _mockSendToken: string,
    _mockReceiveToken: string,
    _mockSendAmount: BigNumberish,
    _mockReceiveAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _mockSendToken,
      _mockReceiveToken,
      _mockSendAmount,
      _mockReceiveAmount,
      overrides || {}
    );
  }
  attach(address: string): ZeroExMock {
    return super.attach(address) as ZeroExMock;
  }
  connect(signer: Signer): ZeroExMock__factory {
    return super.connect(signer) as ZeroExMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZeroExMockInterface {
    return new utils.Interface(_abi) as ZeroExMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ZeroExMock {
    return new Contract(address, _abi, signerOrProvider) as ZeroExMock;
  }
}
