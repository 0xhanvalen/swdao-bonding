/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BasicIssuanceModuleInterface extends utils.Interface {
  functions: {
    "controller()": FunctionFragment;
    "getRequiredComponentUnitsForIssue(address,uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "issue(address,uint256,address)": FunctionFragment;
    "managerIssuanceHook(address)": FunctionFragment;
    "redeem(address,uint256,address)": FunctionFragment;
    "removeModule()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredComponentUnitsForIssue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "managerIssuanceHook",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModule",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredComponentUnitsForIssue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "managerIssuanceHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeModule",
    data: BytesLike
  ): Result;

  events: {
    "SetTokenIssued(address,address,address,address,uint256)": EventFragment;
    "SetTokenRedeemed(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetTokenIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenRedeemed"): EventFragment;
}

export type SetTokenIssuedEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  {
    _setToken: string;
    _issuer: string;
    _to: string;
    _hookContract: string;
    _quantity: BigNumber;
  }
>;

export type SetTokenIssuedEventFilter = TypedEventFilter<SetTokenIssuedEvent>;

export type SetTokenRedeemedEvent = TypedEvent<
  [string, string, string, BigNumber],
  { _setToken: string; _redeemer: string; _to: string; _quantity: BigNumber }
>;

export type SetTokenRedeemedEventFilter = TypedEventFilter<SetTokenRedeemedEvent>;

export interface BasicIssuanceModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BasicIssuanceModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    controller(overrides?: CallOverrides): Promise<[string]>;

    getRequiredComponentUnitsForIssue(
      _setToken: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    initialize(
      _setToken: string,
      _preIssueHook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issue(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerIssuanceHook(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    redeem(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  controller(overrides?: CallOverrides): Promise<string>;

  getRequiredComponentUnitsForIssue(
    _setToken: string,
    _quantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  initialize(
    _setToken: string,
    _preIssueHook: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issue(
    _setToken: string,
    _quantity: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerIssuanceHook(arg0: string, overrides?: CallOverrides): Promise<string>;

  redeem(
    _setToken: string,
    _quantity: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeModule(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    controller(overrides?: CallOverrides): Promise<string>;

    getRequiredComponentUnitsForIssue(
      _setToken: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    initialize(
      _setToken: string,
      _preIssueHook: string,
      overrides?: CallOverrides
    ): Promise<void>;

    issue(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    managerIssuanceHook(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    redeem(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeModule(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "SetTokenIssued(address,address,address,address,uint256)"(
      _setToken?: string | null,
      _issuer?: string | null,
      _to?: string | null,
      _hookContract?: null,
      _quantity?: null
    ): SetTokenIssuedEventFilter;
    SetTokenIssued(
      _setToken?: string | null,
      _issuer?: string | null,
      _to?: string | null,
      _hookContract?: null,
      _quantity?: null
    ): SetTokenIssuedEventFilter;

    "SetTokenRedeemed(address,address,address,uint256)"(
      _setToken?: string | null,
      _redeemer?: string | null,
      _to?: string | null,
      _quantity?: null
    ): SetTokenRedeemedEventFilter;
    SetTokenRedeemed(
      _setToken?: string | null,
      _redeemer?: string | null,
      _to?: string | null,
      _quantity?: null
    ): SetTokenRedeemedEventFilter;
  };

  estimateGas: {
    controller(overrides?: CallOverrides): Promise<BigNumber>;

    getRequiredComponentUnitsForIssue(
      _setToken: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _setToken: string,
      _preIssueHook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issue(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerIssuanceHook(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRequiredComponentUnitsForIssue(
      _setToken: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _setToken: string,
      _preIssueHook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issue(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerIssuanceHook(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
