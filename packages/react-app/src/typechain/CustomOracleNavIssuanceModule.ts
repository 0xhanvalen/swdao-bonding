/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type NAVIssuanceSettingsStruct = {
  managerIssuanceHook: string;
  managerRedemptionHook: string;
  setValuer: string;
  reserveAssets: string[];
  feeRecipient: string;
  managerFees: [BigNumberish, BigNumberish];
  maxManagerFee: BigNumberish;
  premiumPercentage: BigNumberish;
  maxPremiumPercentage: BigNumberish;
  minSetTokenSupply: BigNumberish;
};

export type NAVIssuanceSettingsStructOutput = [
  string,
  string,
  string,
  string[],
  string,
  [BigNumber, BigNumber],
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  managerIssuanceHook: string;
  managerRedemptionHook: string;
  setValuer: string;
  reserveAssets: string[];
  feeRecipient: string;
  managerFees: [BigNumber, BigNumber];
  maxManagerFee: BigNumber;
  premiumPercentage: BigNumber;
  maxPremiumPercentage: BigNumber;
  minSetTokenSupply: BigNumber;
};

export interface CustomOracleNavIssuanceModuleInterface
  extends utils.Interface {
  functions: {
    "addReserveAsset(address,address)": FunctionFragment;
    "controller()": FunctionFragment;
    "editFeeRecipient(address,address)": FunctionFragment;
    "editManagerFee(address,uint256,uint256)": FunctionFragment;
    "editPremium(address,uint256)": FunctionFragment;
    "getExpectedReserveRedeemQuantity(address,address,uint256)": FunctionFragment;
    "getExpectedSetTokenIssueQuantity(address,address,uint256)": FunctionFragment;
    "getIssuePremium(address,address,uint256)": FunctionFragment;
    "getManagerFee(address,uint256)": FunctionFragment;
    "getRedeemPremium(address,address,uint256)": FunctionFragment;
    "getReserveAssets(address)": FunctionFragment;
    "initialize(address,(address,address,address,address[],address,uint256[2],uint256,uint256,uint256,uint256))": FunctionFragment;
    "isIssueValid(address,address,uint256)": FunctionFragment;
    "isRedeemValid(address,address,uint256)": FunctionFragment;
    "isReserveAsset(address,address)": FunctionFragment;
    "issue(address,address,uint256,uint256,address)": FunctionFragment;
    "issueWithEther(address,uint256,address)": FunctionFragment;
    "navIssuanceSettings(address)": FunctionFragment;
    "redeem(address,address,uint256,uint256,address)": FunctionFragment;
    "redeemIntoEther(address,uint256,uint256,address)": FunctionFragment;
    "removeModule()": FunctionFragment;
    "removeReserveAsset(address,address)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addReserveAsset",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editFeeRecipient",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "editManagerFee",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editPremium",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedReserveRedeemQuantity",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedSetTokenIssueQuantity",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuePremium",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getManagerFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedeemPremium",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveAssets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, NAVIssuanceSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isIssueValid",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRedeemValid",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isReserveAsset",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "issueWithEther",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "navIssuanceSettings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemIntoEther",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeReserveAsset",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addReserveAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "editFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editManagerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedReserveRedeemQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedSetTokenIssueQuantity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIssuePremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManagerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isIssueValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRedeemValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReserveAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issueWithEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "navIssuanceSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemIntoEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReserveAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "FeeRecipientEdited(address,address)": EventFragment;
    "ManagerFeeEdited(address,uint256,uint256)": EventFragment;
    "PremiumEdited(address,uint256)": EventFragment;
    "ReserveAssetAdded(address,address)": EventFragment;
    "ReserveAssetRemoved(address,address)": EventFragment;
    "SetTokenNAVIssued(address,address,address,address,address,uint256,uint256,uint256)": EventFragment;
    "SetTokenNAVRedeemed(address,address,address,address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeRecipientEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerFeeEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveAssetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveAssetRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenNAVIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenNAVRedeemed"): EventFragment;
}

export type FeeRecipientEditedEvent = TypedEvent<
  [string, string],
  { _setToken: string; _feeRecipient: string }
>;

export type FeeRecipientEditedEventFilter = TypedEventFilter<FeeRecipientEditedEvent>;

export type ManagerFeeEditedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _setToken: string; _newManagerFee: BigNumber; _index: BigNumber }
>;

export type ManagerFeeEditedEventFilter = TypedEventFilter<ManagerFeeEditedEvent>;

export type PremiumEditedEvent = TypedEvent<
  [string, BigNumber],
  { _setToken: string; _newPremium: BigNumber }
>;

export type PremiumEditedEventFilter = TypedEventFilter<PremiumEditedEvent>;

export type ReserveAssetAddedEvent = TypedEvent<
  [string, string],
  { _setToken: string; _newReserveAsset: string }
>;

export type ReserveAssetAddedEventFilter = TypedEventFilter<ReserveAssetAddedEvent>;

export type ReserveAssetRemovedEvent = TypedEvent<
  [string, string],
  { _setToken: string; _removedReserveAsset: string }
>;

export type ReserveAssetRemovedEventFilter = TypedEventFilter<ReserveAssetRemovedEvent>;

export type SetTokenNAVIssuedEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, BigNumber, BigNumber],
  {
    _setToken: string;
    _issuer: string;
    _to: string;
    _reserveAsset: string;
    _hookContract: string;
    _setTokenQuantity: BigNumber;
    _managerFee: BigNumber;
    _premium: BigNumber;
  }
>;

export type SetTokenNAVIssuedEventFilter = TypedEventFilter<SetTokenNAVIssuedEvent>;

export type SetTokenNAVRedeemedEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, BigNumber, BigNumber],
  {
    _setToken: string;
    _redeemer: string;
    _to: string;
    _reserveAsset: string;
    _hookContract: string;
    _setTokenQuantity: BigNumber;
    _managerFee: BigNumber;
    _premium: BigNumber;
  }
>;

export type SetTokenNAVRedeemedEventFilter = TypedEventFilter<SetTokenNAVRedeemedEvent>;

export interface CustomOracleNavIssuanceModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CustomOracleNavIssuanceModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addReserveAsset(
      _setToken: string,
      _reserveAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    editFeeRecipient(
      _setToken: string,
      _managerFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editManagerFee(
      _setToken: string,
      _managerFeePercentage: BigNumberish,
      _managerFeeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editPremium(
      _setToken: string,
      _premiumPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getExpectedReserveRedeemQuantity(
      _setToken: string,
      _reserveAsset: string,
      _setTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getExpectedSetTokenIssueQuantity(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIssuePremium(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getManagerFee(
      _setToken: string,
      _managerFeeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRedeemPremium(
      _setToken: string,
      _reserveAsset: string,
      _setTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserveAssets(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    initialize(
      _setToken: string,
      _navIssuanceSettings: NAVIssuanceSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isIssueValid(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRedeemValid(
      _setToken: string,
      _reserveAsset: string,
      _setTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isReserveAsset(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issue(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      _minSetTokenReceiveQuantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issueWithEther(
      _setToken: string,
      _minSetTokenReceiveQuantity: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    navIssuanceSettings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        managerIssuanceHook: string;
        managerRedemptionHook: string;
        setValuer: string;
        feeRecipient: string;
        maxManagerFee: BigNumber;
        premiumPercentage: BigNumber;
        maxPremiumPercentage: BigNumber;
        minSetTokenSupply: BigNumber;
      }
    >;

    redeem(
      _setToken: string,
      _reserveAsset: string,
      _setTokenQuantity: BigNumberish,
      _minReserveReceiveQuantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemIntoEther(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _minReserveReceiveQuantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeReserveAsset(
      _setToken: string,
      _reserveAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  addReserveAsset(
    _setToken: string,
    _reserveAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  editFeeRecipient(
    _setToken: string,
    _managerFeeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editManagerFee(
    _setToken: string,
    _managerFeePercentage: BigNumberish,
    _managerFeeIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editPremium(
    _setToken: string,
    _premiumPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getExpectedReserveRedeemQuantity(
    _setToken: string,
    _reserveAsset: string,
    _setTokenQuantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExpectedSetTokenIssueQuantity(
    _setToken: string,
    _reserveAsset: string,
    _reserveAssetQuantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIssuePremium(
    _setToken: string,
    _reserveAsset: string,
    _reserveAssetQuantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getManagerFee(
    _setToken: string,
    _managerFeeIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRedeemPremium(
    _setToken: string,
    _reserveAsset: string,
    _setTokenQuantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserveAssets(
    _setToken: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  initialize(
    _setToken: string,
    _navIssuanceSettings: NAVIssuanceSettingsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isIssueValid(
    _setToken: string,
    _reserveAsset: string,
    _reserveAssetQuantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRedeemValid(
    _setToken: string,
    _reserveAsset: string,
    _setTokenQuantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isReserveAsset(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issue(
    _setToken: string,
    _reserveAsset: string,
    _reserveAssetQuantity: BigNumberish,
    _minSetTokenReceiveQuantity: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issueWithEther(
    _setToken: string,
    _minSetTokenReceiveQuantity: BigNumberish,
    _to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  navIssuanceSettings(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      managerIssuanceHook: string;
      managerRedemptionHook: string;
      setValuer: string;
      feeRecipient: string;
      maxManagerFee: BigNumber;
      premiumPercentage: BigNumber;
      maxPremiumPercentage: BigNumber;
      minSetTokenSupply: BigNumber;
    }
  >;

  redeem(
    _setToken: string,
    _reserveAsset: string,
    _setTokenQuantity: BigNumberish,
    _minReserveReceiveQuantity: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemIntoEther(
    _setToken: string,
    _setTokenQuantity: BigNumberish,
    _minReserveReceiveQuantity: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeModule(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeReserveAsset(
    _setToken: string,
    _reserveAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addReserveAsset(
      _setToken: string,
      _reserveAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    editFeeRecipient(
      _setToken: string,
      _managerFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    editManagerFee(
      _setToken: string,
      _managerFeePercentage: BigNumberish,
      _managerFeeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    editPremium(
      _setToken: string,
      _premiumPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getExpectedReserveRedeemQuantity(
      _setToken: string,
      _reserveAsset: string,
      _setTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpectedSetTokenIssueQuantity(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIssuePremium(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getManagerFee(
      _setToken: string,
      _managerFeeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedeemPremium(
      _setToken: string,
      _reserveAsset: string,
      _setTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveAssets(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    initialize(
      _setToken: string,
      _navIssuanceSettings: NAVIssuanceSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isIssueValid(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRedeemValid(
      _setToken: string,
      _reserveAsset: string,
      _setTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isReserveAsset(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issue(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      _minSetTokenReceiveQuantity: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    issueWithEther(
      _setToken: string,
      _minSetTokenReceiveQuantity: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    navIssuanceSettings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        managerIssuanceHook: string;
        managerRedemptionHook: string;
        setValuer: string;
        feeRecipient: string;
        maxManagerFee: BigNumber;
        premiumPercentage: BigNumber;
        maxPremiumPercentage: BigNumber;
        minSetTokenSupply: BigNumber;
      }
    >;

    redeem(
      _setToken: string,
      _reserveAsset: string,
      _setTokenQuantity: BigNumberish,
      _minReserveReceiveQuantity: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemIntoEther(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _minReserveReceiveQuantity: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeModule(overrides?: CallOverrides): Promise<void>;

    removeReserveAsset(
      _setToken: string,
      _reserveAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "FeeRecipientEdited(address,address)"(
      _setToken?: string | null,
      _feeRecipient?: null
    ): FeeRecipientEditedEventFilter;
    FeeRecipientEdited(
      _setToken?: string | null,
      _feeRecipient?: null
    ): FeeRecipientEditedEventFilter;

    "ManagerFeeEdited(address,uint256,uint256)"(
      _setToken?: string | null,
      _newManagerFee?: null,
      _index?: null
    ): ManagerFeeEditedEventFilter;
    ManagerFeeEdited(
      _setToken?: string | null,
      _newManagerFee?: null,
      _index?: null
    ): ManagerFeeEditedEventFilter;

    "PremiumEdited(address,uint256)"(
      _setToken?: string | null,
      _newPremium?: null
    ): PremiumEditedEventFilter;
    PremiumEdited(
      _setToken?: string | null,
      _newPremium?: null
    ): PremiumEditedEventFilter;

    "ReserveAssetAdded(address,address)"(
      _setToken?: string | null,
      _newReserveAsset?: null
    ): ReserveAssetAddedEventFilter;
    ReserveAssetAdded(
      _setToken?: string | null,
      _newReserveAsset?: null
    ): ReserveAssetAddedEventFilter;

    "ReserveAssetRemoved(address,address)"(
      _setToken?: string | null,
      _removedReserveAsset?: null
    ): ReserveAssetRemovedEventFilter;
    ReserveAssetRemoved(
      _setToken?: string | null,
      _removedReserveAsset?: null
    ): ReserveAssetRemovedEventFilter;

    "SetTokenNAVIssued(address,address,address,address,address,uint256,uint256,uint256)"(
      _setToken?: string | null,
      _issuer?: null,
      _to?: null,
      _reserveAsset?: null,
      _hookContract?: null,
      _setTokenQuantity?: null,
      _managerFee?: null,
      _premium?: null
    ): SetTokenNAVIssuedEventFilter;
    SetTokenNAVIssued(
      _setToken?: string | null,
      _issuer?: null,
      _to?: null,
      _reserveAsset?: null,
      _hookContract?: null,
      _setTokenQuantity?: null,
      _managerFee?: null,
      _premium?: null
    ): SetTokenNAVIssuedEventFilter;

    "SetTokenNAVRedeemed(address,address,address,address,address,uint256,uint256,uint256)"(
      _setToken?: string | null,
      _redeemer?: null,
      _to?: null,
      _reserveAsset?: null,
      _hookContract?: null,
      _setTokenQuantity?: null,
      _managerFee?: null,
      _premium?: null
    ): SetTokenNAVRedeemedEventFilter;
    SetTokenNAVRedeemed(
      _setToken?: string | null,
      _redeemer?: null,
      _to?: null,
      _reserveAsset?: null,
      _hookContract?: null,
      _setTokenQuantity?: null,
      _managerFee?: null,
      _premium?: null
    ): SetTokenNAVRedeemedEventFilter;
  };

  estimateGas: {
    addReserveAsset(
      _setToken: string,
      _reserveAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    editFeeRecipient(
      _setToken: string,
      _managerFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editManagerFee(
      _setToken: string,
      _managerFeePercentage: BigNumberish,
      _managerFeeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editPremium(
      _setToken: string,
      _premiumPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getExpectedReserveRedeemQuantity(
      _setToken: string,
      _reserveAsset: string,
      _setTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpectedSetTokenIssueQuantity(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIssuePremium(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getManagerFee(
      _setToken: string,
      _managerFeeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedeemPremium(
      _setToken: string,
      _reserveAsset: string,
      _setTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveAssets(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _setToken: string,
      _navIssuanceSettings: NAVIssuanceSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isIssueValid(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRedeemValid(
      _setToken: string,
      _reserveAsset: string,
      _setTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReserveAsset(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      _minSetTokenReceiveQuantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issueWithEther(
      _setToken: string,
      _minSetTokenReceiveQuantity: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    navIssuanceSettings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      _setToken: string,
      _reserveAsset: string,
      _setTokenQuantity: BigNumberish,
      _minReserveReceiveQuantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemIntoEther(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _minReserveReceiveQuantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeReserveAsset(
      _setToken: string,
      _reserveAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addReserveAsset(
      _setToken: string,
      _reserveAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    editFeeRecipient(
      _setToken: string,
      _managerFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editManagerFee(
      _setToken: string,
      _managerFeePercentage: BigNumberish,
      _managerFeeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editPremium(
      _setToken: string,
      _premiumPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getExpectedReserveRedeemQuantity(
      _setToken: string,
      _reserveAsset: string,
      _setTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExpectedSetTokenIssueQuantity(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIssuePremium(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getManagerFee(
      _setToken: string,
      _managerFeeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedeemPremium(
      _setToken: string,
      _reserveAsset: string,
      _setTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveAssets(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _setToken: string,
      _navIssuanceSettings: NAVIssuanceSettingsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isIssueValid(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRedeemValid(
      _setToken: string,
      _reserveAsset: string,
      _setTokenQuantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReserveAsset(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      _setToken: string,
      _reserveAsset: string,
      _reserveAssetQuantity: BigNumberish,
      _minSetTokenReceiveQuantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issueWithEther(
      _setToken: string,
      _minSetTokenReceiveQuantity: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    navIssuanceSettings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      _setToken: string,
      _reserveAsset: string,
      _setTokenQuantity: BigNumberish,
      _minReserveReceiveQuantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemIntoEther(
      _setToken: string,
      _setTokenQuantity: BigNumberish,
      _minReserveReceiveQuantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeReserveAsset(
      _setToken: string,
      _reserveAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
