/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CompoundLikeGovernanceAdapterInterface
  extends utils.Interface {
  functions: {
    "DELEGATE_SIGNATURE()": FunctionFragment;
    "PROPOSE_SIGNATURE()": FunctionFragment;
    "ZERO_ADDRESS()": FunctionFragment;
    "getDelegateCalldata(address)": FunctionFragment;
    "getProposeCalldata(bytes)": FunctionFragment;
    "getRegisterCalldata(address)": FunctionFragment;
    "getRevokeCalldata()": FunctionFragment;
    "getVoteCalldata(uint256,bool,bytes)": FunctionFragment;
    "governanceToken()": FunctionFragment;
    "governorAlpha()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DELEGATE_SIGNATURE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPOSE_SIGNATURE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZERO_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegateCalldata",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposeCalldata",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisterCalldata",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevokeCalldata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteCalldata",
    values: [BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governorAlpha",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DELEGATE_SIGNATURE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSE_SIGNATURE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ZERO_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegateCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposeCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisterCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevokeCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governorAlpha",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CompoundLikeGovernanceAdapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CompoundLikeGovernanceAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DELEGATE_SIGNATURE(overrides?: CallOverrides): Promise<[string]>;

    PROPOSE_SIGNATURE(overrides?: CallOverrides): Promise<[string]>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    getDelegateCalldata(
      _delegatee: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getProposeCalldata(
      _proposalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getRegisterCalldata(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getRevokeCalldata(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getVoteCalldata(
      _proposalId: BigNumberish,
      _support: boolean,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    governanceToken(overrides?: CallOverrides): Promise<[string]>;

    governorAlpha(overrides?: CallOverrides): Promise<[string]>;
  };

  DELEGATE_SIGNATURE(overrides?: CallOverrides): Promise<string>;

  PROPOSE_SIGNATURE(overrides?: CallOverrides): Promise<string>;

  ZERO_ADDRESS(overrides?: CallOverrides): Promise<string>;

  getDelegateCalldata(
    _delegatee: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getProposeCalldata(
    _proposalData: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getRegisterCalldata(
    _setToken: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getRevokeCalldata(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  getVoteCalldata(
    _proposalId: BigNumberish,
    _support: boolean,
    arg2: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, string]>;

  governanceToken(overrides?: CallOverrides): Promise<string>;

  governorAlpha(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DELEGATE_SIGNATURE(overrides?: CallOverrides): Promise<string>;

    PROPOSE_SIGNATURE(overrides?: CallOverrides): Promise<string>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<string>;

    getDelegateCalldata(
      _delegatee: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getProposeCalldata(
      _proposalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getRegisterCalldata(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getRevokeCalldata(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    getVoteCalldata(
      _proposalId: BigNumberish,
      _support: boolean,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, string]>;

    governanceToken(overrides?: CallOverrides): Promise<string>;

    governorAlpha(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    DELEGATE_SIGNATURE(overrides?: CallOverrides): Promise<BigNumber>;

    PROPOSE_SIGNATURE(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    getDelegateCalldata(
      _delegatee: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposeCalldata(
      _proposalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisterCalldata(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevokeCalldata(overrides?: CallOverrides): Promise<BigNumber>;

    getVoteCalldata(
      _proposalId: BigNumberish,
      _support: boolean,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceToken(overrides?: CallOverrides): Promise<BigNumber>;

    governorAlpha(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DELEGATE_SIGNATURE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PROPOSE_SIGNATURE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZERO_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDelegateCalldata(
      _delegatee: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposeCalldata(
      _proposalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisterCalldata(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRevokeCalldata(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVoteCalldata(
      _proposalId: BigNumberish,
      _support: boolean,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governorAlpha(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
