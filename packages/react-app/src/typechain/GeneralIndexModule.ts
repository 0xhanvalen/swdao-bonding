/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface GeneralIndexModuleInterface extends utils.Interface {
  functions: {
    "controller()": FunctionFragment;
    "executionInfo(address,address)": FunctionFragment;
    "getAllowedTraders(address)": FunctionFragment;
    "getComponentTradeQuantityAndDirection(address,address)": FunctionFragment;
    "getIsAllowedTrader(address,address)": FunctionFragment;
    "getRebalanceComponents(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "permissionInfo(address)": FunctionFragment;
    "raiseAssetTargets(address)": FunctionFragment;
    "rebalanceInfo(address)": FunctionFragment;
    "removeModule()": FunctionFragment;
    "setAnyoneTrade(address,bool)": FunctionFragment;
    "setCoolOffPeriods(address,address[],uint256[])": FunctionFragment;
    "setExchangeData(address,address[],bytes[])": FunctionFragment;
    "setExchanges(address,address[],string[])": FunctionFragment;
    "setRaiseTargetPercentage(address,uint256)": FunctionFragment;
    "setTradeMaximums(address,address[],uint256[])": FunctionFragment;
    "setTraderStatus(address,address[],bool[])": FunctionFragment;
    "startRebalance(address,address[],uint256[],uint256[],uint256)": FunctionFragment;
    "trade(address,address,uint256)": FunctionFragment;
    "tradeRemainingWETH(address,address,uint256)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executionInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedTraders",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentTradeQuantityAndDirection",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsAllowedTrader",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRebalanceComponents",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "permissionInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "raiseAssetTargets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAnyoneTrade",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoolOffPeriods",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangeData",
    values: [string, string[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchanges",
    values: [string, string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRaiseTargetPercentage",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradeMaximums",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTraderStatus",
    values: [string, string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "startRebalance",
    values: [string, string[], BigNumberish[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeRemainingWETH",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedTraders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentTradeQuantityAndDirection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsAllowedTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRebalanceComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permissionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raiseAssetTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAnyoneTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoolOffPeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRaiseTargetPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradeMaximums",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTraderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tradeRemainingWETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "AnyoneTradeUpdated(address,bool)": EventFragment;
    "AssetExchangeUpdated(address,address,string)": EventFragment;
    "AssetTargetsRaised(address,uint256)": EventFragment;
    "CoolOffPeriodUpdated(address,address,uint256)": EventFragment;
    "ExchangeDataUpdated(address,address,bytes)": EventFragment;
    "RaiseTargetPercentageUpdated(address,uint256)": EventFragment;
    "RebalanceStarted(address,address[],uint256[],uint256)": EventFragment;
    "TradeExecuted(address,address,address,address,address,uint256,uint256,uint256)": EventFragment;
    "TradeMaximumUpdated(address,address,uint256)": EventFragment;
    "TraderStatusUpdated(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnyoneTradeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetExchangeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetTargetsRaised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CoolOffPeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeDataUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RaiseTargetPercentageUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalanceStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeMaximumUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TraderStatusUpdated"): EventFragment;
}

export type AnyoneTradeUpdatedEvent = TypedEvent<
  [string, boolean],
  { _setToken: string; _status: boolean }
>;

export type AnyoneTradeUpdatedEventFilter = TypedEventFilter<AnyoneTradeUpdatedEvent>;

export type AssetExchangeUpdatedEvent = TypedEvent<
  [string, string, string],
  { _setToken: string; _component: string; _newExchangeName: string }
>;

export type AssetExchangeUpdatedEventFilter = TypedEventFilter<AssetExchangeUpdatedEvent>;

export type AssetTargetsRaisedEvent = TypedEvent<
  [string, BigNumber],
  { _setToken: string; positionMultiplier: BigNumber }
>;

export type AssetTargetsRaisedEventFilter = TypedEventFilter<AssetTargetsRaisedEvent>;

export type CoolOffPeriodUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  { _setToken: string; _component: string; _newCoolOffPeriod: BigNumber }
>;

export type CoolOffPeriodUpdatedEventFilter = TypedEventFilter<CoolOffPeriodUpdatedEvent>;

export type ExchangeDataUpdatedEvent = TypedEvent<
  [string, string, string],
  { _setToken: string; _component: string; _newExchangeData: string }
>;

export type ExchangeDataUpdatedEventFilter = TypedEventFilter<ExchangeDataUpdatedEvent>;

export type RaiseTargetPercentageUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { _setToken: string; _raiseTargetPercentage: BigNumber }
>;

export type RaiseTargetPercentageUpdatedEventFilter = TypedEventFilter<RaiseTargetPercentageUpdatedEvent>;

export type RebalanceStartedEvent = TypedEvent<
  [string, string[], BigNumber[], BigNumber],
  {
    _setToken: string;
    aggregateComponents: string[];
    aggregateTargetUnits: BigNumber[];
    positionMultiplier: BigNumber;
  }
>;

export type RebalanceStartedEventFilter = TypedEventFilter<RebalanceStartedEvent>;

export type TradeExecutedEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, BigNumber, BigNumber],
  {
    _setToken: string;
    _sellComponent: string;
    _buyComponent: string;
    _exchangeAdapter: string;
    _executor: string;
    _netAmountSold: BigNumber;
    _netAmountReceived: BigNumber;
    _protocolFee: BigNumber;
  }
>;

export type TradeExecutedEventFilter = TypedEventFilter<TradeExecutedEvent>;

export type TradeMaximumUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  { _setToken: string; _component: string; _newMaximum: BigNumber }
>;

export type TradeMaximumUpdatedEventFilter = TypedEventFilter<TradeMaximumUpdatedEvent>;

export type TraderStatusUpdatedEvent = TypedEvent<
  [string, string, boolean],
  { _setToken: string; _trader: string; _status: boolean }
>;

export type TraderStatusUpdatedEventFilter = TypedEventFilter<TraderStatusUpdatedEvent>;

export interface GeneralIndexModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GeneralIndexModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    controller(overrides?: CallOverrides): Promise<[string]>;

    executionInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, string] & {
        targetUnit: BigNumber;
        maxSize: BigNumber;
        coolOffPeriod: BigNumber;
        lastTradeTimestamp: BigNumber;
        exchangeName: string;
        exchangeData: string;
      }
    >;

    getAllowedTraders(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getComponentTradeQuantityAndDirection(
      _setToken: string,
      _component: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getIsAllowedTrader(
      _setToken: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRebalanceComponents(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    initialize(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    permissionInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { anyoneTrade: boolean }>;

    raiseAssetTargets(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebalanceInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        positionMultiplier: BigNumber;
        raiseTargetPercentage: BigNumber;
      }
    >;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAnyoneTrade(
      _setToken: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCoolOffPeriods(
      _setToken: string,
      _components: string[],
      _coolOffPeriods: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExchangeData(
      _setToken: string,
      _components: string[],
      _exchangeData: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExchanges(
      _setToken: string,
      _components: string[],
      _exchangeNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRaiseTargetPercentage(
      _setToken: string,
      _raiseTargetPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTradeMaximums(
      _setToken: string,
      _components: string[],
      _tradeMaximums: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTraderStatus(
      _setToken: string,
      _traders: string[],
      _statuses: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startRebalance(
      _setToken: string,
      _newComponents: string[],
      _newComponentsTargetUnits: BigNumberish[],
      _oldComponentsTargetUnits: BigNumberish[],
      _positionMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trade(
      _setToken: string,
      _component: string,
      _ethQuantityLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tradeRemainingWETH(
      _setToken: string,
      _component: string,
      _minComponentReceived: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  controller(overrides?: CallOverrides): Promise<string>;

  executionInfo(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string, string] & {
      targetUnit: BigNumber;
      maxSize: BigNumber;
      coolOffPeriod: BigNumber;
      lastTradeTimestamp: BigNumber;
      exchangeName: string;
      exchangeData: string;
    }
  >;

  getAllowedTraders(
    _setToken: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getComponentTradeQuantityAndDirection(
    _setToken: string,
    _component: string,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  getIsAllowedTrader(
    _setToken: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRebalanceComponents(
    _setToken: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  initialize(
    _setToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  permissionInfo(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  raiseAssetTargets(
    _setToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebalanceInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      positionMultiplier: BigNumber;
      raiseTargetPercentage: BigNumber;
    }
  >;

  removeModule(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAnyoneTrade(
    _setToken: string,
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCoolOffPeriods(
    _setToken: string,
    _components: string[],
    _coolOffPeriods: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExchangeData(
    _setToken: string,
    _components: string[],
    _exchangeData: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExchanges(
    _setToken: string,
    _components: string[],
    _exchangeNames: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRaiseTargetPercentage(
    _setToken: string,
    _raiseTargetPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTradeMaximums(
    _setToken: string,
    _components: string[],
    _tradeMaximums: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTraderStatus(
    _setToken: string,
    _traders: string[],
    _statuses: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startRebalance(
    _setToken: string,
    _newComponents: string[],
    _newComponentsTargetUnits: BigNumberish[],
    _oldComponentsTargetUnits: BigNumberish[],
    _positionMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trade(
    _setToken: string,
    _component: string,
    _ethQuantityLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tradeRemainingWETH(
    _setToken: string,
    _component: string,
    _minComponentReceived: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    controller(overrides?: CallOverrides): Promise<string>;

    executionInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, string] & {
        targetUnit: BigNumber;
        maxSize: BigNumber;
        coolOffPeriod: BigNumber;
        lastTradeTimestamp: BigNumber;
        exchangeName: string;
        exchangeData: string;
      }
    >;

    getAllowedTraders(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getComponentTradeQuantityAndDirection(
      _setToken: string,
      _component: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getIsAllowedTrader(
      _setToken: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRebalanceComponents(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    initialize(_setToken: string, overrides?: CallOverrides): Promise<void>;

    permissionInfo(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    raiseAssetTargets(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rebalanceInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        positionMultiplier: BigNumber;
        raiseTargetPercentage: BigNumber;
      }
    >;

    removeModule(overrides?: CallOverrides): Promise<void>;

    setAnyoneTrade(
      _setToken: string,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCoolOffPeriods(
      _setToken: string,
      _components: string[],
      _coolOffPeriods: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setExchangeData(
      _setToken: string,
      _components: string[],
      _exchangeData: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    setExchanges(
      _setToken: string,
      _components: string[],
      _exchangeNames: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRaiseTargetPercentage(
      _setToken: string,
      _raiseTargetPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTradeMaximums(
      _setToken: string,
      _components: string[],
      _tradeMaximums: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTraderStatus(
      _setToken: string,
      _traders: string[],
      _statuses: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    startRebalance(
      _setToken: string,
      _newComponents: string[],
      _newComponentsTargetUnits: BigNumberish[],
      _oldComponentsTargetUnits: BigNumberish[],
      _positionMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    trade(
      _setToken: string,
      _component: string,
      _ethQuantityLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tradeRemainingWETH(
      _setToken: string,
      _component: string,
      _minComponentReceived: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AnyoneTradeUpdated(address,bool)"(
      _setToken?: string | null,
      _status?: boolean | null
    ): AnyoneTradeUpdatedEventFilter;
    AnyoneTradeUpdated(
      _setToken?: string | null,
      _status?: boolean | null
    ): AnyoneTradeUpdatedEventFilter;

    "AssetExchangeUpdated(address,address,string)"(
      _setToken?: string | null,
      _component?: string | null,
      _newExchangeName?: null
    ): AssetExchangeUpdatedEventFilter;
    AssetExchangeUpdated(
      _setToken?: string | null,
      _component?: string | null,
      _newExchangeName?: null
    ): AssetExchangeUpdatedEventFilter;

    "AssetTargetsRaised(address,uint256)"(
      _setToken?: string | null,
      positionMultiplier?: BigNumberish | null
    ): AssetTargetsRaisedEventFilter;
    AssetTargetsRaised(
      _setToken?: string | null,
      positionMultiplier?: BigNumberish | null
    ): AssetTargetsRaisedEventFilter;

    "CoolOffPeriodUpdated(address,address,uint256)"(
      _setToken?: string | null,
      _component?: string | null,
      _newCoolOffPeriod?: null
    ): CoolOffPeriodUpdatedEventFilter;
    CoolOffPeriodUpdated(
      _setToken?: string | null,
      _component?: string | null,
      _newCoolOffPeriod?: null
    ): CoolOffPeriodUpdatedEventFilter;

    "ExchangeDataUpdated(address,address,bytes)"(
      _setToken?: string | null,
      _component?: string | null,
      _newExchangeData?: null
    ): ExchangeDataUpdatedEventFilter;
    ExchangeDataUpdated(
      _setToken?: string | null,
      _component?: string | null,
      _newExchangeData?: null
    ): ExchangeDataUpdatedEventFilter;

    "RaiseTargetPercentageUpdated(address,uint256)"(
      _setToken?: string | null,
      _raiseTargetPercentage?: BigNumberish | null
    ): RaiseTargetPercentageUpdatedEventFilter;
    RaiseTargetPercentageUpdated(
      _setToken?: string | null,
      _raiseTargetPercentage?: BigNumberish | null
    ): RaiseTargetPercentageUpdatedEventFilter;

    "RebalanceStarted(address,address[],uint256[],uint256)"(
      _setToken?: string | null,
      aggregateComponents?: null,
      aggregateTargetUnits?: null,
      positionMultiplier?: BigNumberish | null
    ): RebalanceStartedEventFilter;
    RebalanceStarted(
      _setToken?: string | null,
      aggregateComponents?: null,
      aggregateTargetUnits?: null,
      positionMultiplier?: BigNumberish | null
    ): RebalanceStartedEventFilter;

    "TradeExecuted(address,address,address,address,address,uint256,uint256,uint256)"(
      _setToken?: string | null,
      _sellComponent?: string | null,
      _buyComponent?: string | null,
      _exchangeAdapter?: null,
      _executor?: null,
      _netAmountSold?: null,
      _netAmountReceived?: null,
      _protocolFee?: null
    ): TradeExecutedEventFilter;
    TradeExecuted(
      _setToken?: string | null,
      _sellComponent?: string | null,
      _buyComponent?: string | null,
      _exchangeAdapter?: null,
      _executor?: null,
      _netAmountSold?: null,
      _netAmountReceived?: null,
      _protocolFee?: null
    ): TradeExecutedEventFilter;

    "TradeMaximumUpdated(address,address,uint256)"(
      _setToken?: string | null,
      _component?: string | null,
      _newMaximum?: null
    ): TradeMaximumUpdatedEventFilter;
    TradeMaximumUpdated(
      _setToken?: string | null,
      _component?: string | null,
      _newMaximum?: null
    ): TradeMaximumUpdatedEventFilter;

    "TraderStatusUpdated(address,address,bool)"(
      _setToken?: string | null,
      _trader?: string | null,
      _status?: null
    ): TraderStatusUpdatedEventFilter;
    TraderStatusUpdated(
      _setToken?: string | null,
      _trader?: string | null,
      _status?: null
    ): TraderStatusUpdatedEventFilter;
  };

  estimateGas: {
    controller(overrides?: CallOverrides): Promise<BigNumber>;

    executionInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllowedTraders(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentTradeQuantityAndDirection(
      _setToken: string,
      _component: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsAllowedTrader(
      _setToken: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRebalanceComponents(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    permissionInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    raiseAssetTargets(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebalanceInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAnyoneTrade(
      _setToken: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCoolOffPeriods(
      _setToken: string,
      _components: string[],
      _coolOffPeriods: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExchangeData(
      _setToken: string,
      _components: string[],
      _exchangeData: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExchanges(
      _setToken: string,
      _components: string[],
      _exchangeNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRaiseTargetPercentage(
      _setToken: string,
      _raiseTargetPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTradeMaximums(
      _setToken: string,
      _components: string[],
      _tradeMaximums: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTraderStatus(
      _setToken: string,
      _traders: string[],
      _statuses: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startRebalance(
      _setToken: string,
      _newComponents: string[],
      _newComponentsTargetUnits: BigNumberish[],
      _oldComponentsTargetUnits: BigNumberish[],
      _positionMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trade(
      _setToken: string,
      _component: string,
      _ethQuantityLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tradeRemainingWETH(
      _setToken: string,
      _component: string,
      _minComponentReceived: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executionInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllowedTraders(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentTradeQuantityAndDirection(
      _setToken: string,
      _component: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsAllowedTrader(
      _setToken: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRebalanceComponents(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    permissionInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    raiseAssetTargets(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebalanceInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAnyoneTrade(
      _setToken: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCoolOffPeriods(
      _setToken: string,
      _components: string[],
      _coolOffPeriods: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExchangeData(
      _setToken: string,
      _components: string[],
      _exchangeData: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExchanges(
      _setToken: string,
      _components: string[],
      _exchangeNames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRaiseTargetPercentage(
      _setToken: string,
      _raiseTargetPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTradeMaximums(
      _setToken: string,
      _components: string[],
      _tradeMaximums: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTraderStatus(
      _setToken: string,
      _traders: string[],
      _statuses: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startRebalance(
      _setToken: string,
      _newComponents: string[],
      _newComponentsTargetUnits: BigNumberish[],
      _oldComponentsTargetUnits: BigNumberish[],
      _positionMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trade(
      _setToken: string,
      _component: string,
      _ethQuantityLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tradeRemainingWETH(
      _setToken: string,
      _component: string,
      _minComponentReceived: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
