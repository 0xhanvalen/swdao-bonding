/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AaveV2LendingPoolCollateralManagerInterface
  extends utils.Interface {
  functions: {
    "liquidationCall(address,address,address,uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "liquidationCall",
    values: [string, string, string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "liquidationCall",
    data: BytesLike
  ): Result;

  events: {
    "LiquidationCall(address,address,address,uint256,uint256,address,bool)": EventFragment;
    "ReserveUsedAsCollateralDisabled(address,address)": EventFragment;
    "ReserveUsedAsCollateralEnabled(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidationCall"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveUsedAsCollateralDisabled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveUsedAsCollateralEnabled"
  ): EventFragment;
}

export type LiquidationCallEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string, boolean],
  {
    collateral: string;
    principal: string;
    user: string;
    debtToCover: BigNumber;
    liquidatedCollateralAmount: BigNumber;
    liquidator: string;
    receiveAToken: boolean;
  }
>;

export type LiquidationCallEventFilter = TypedEventFilter<LiquidationCallEvent>;

export type ReserveUsedAsCollateralDisabledEvent = TypedEvent<
  [string, string],
  { reserve: string; user: string }
>;

export type ReserveUsedAsCollateralDisabledEventFilter = TypedEventFilter<ReserveUsedAsCollateralDisabledEvent>;

export type ReserveUsedAsCollateralEnabledEvent = TypedEvent<
  [string, string],
  { reserve: string; user: string }
>;

export type ReserveUsedAsCollateralEnabledEventFilter = TypedEventFilter<ReserveUsedAsCollateralEnabledEvent>;

export interface AaveV2LendingPoolCollateralManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AaveV2LendingPoolCollateralManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    liquidationCall(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  liquidationCall(
    collateralAsset: string,
    debtAsset: string,
    user: string,
    debtToCover: BigNumberish,
    receiveAToken: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    liquidationCall(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;
  };

  filters: {
    "LiquidationCall(address,address,address,uint256,uint256,address,bool)"(
      collateral?: string | null,
      principal?: string | null,
      user?: string | null,
      debtToCover?: null,
      liquidatedCollateralAmount?: null,
      liquidator?: null,
      receiveAToken?: null
    ): LiquidationCallEventFilter;
    LiquidationCall(
      collateral?: string | null,
      principal?: string | null,
      user?: string | null,
      debtToCover?: null,
      liquidatedCollateralAmount?: null,
      liquidator?: null,
      receiveAToken?: null
    ): LiquidationCallEventFilter;

    "ReserveUsedAsCollateralDisabled(address,address)"(
      reserve?: string | null,
      user?: string | null
    ): ReserveUsedAsCollateralDisabledEventFilter;
    ReserveUsedAsCollateralDisabled(
      reserve?: string | null,
      user?: string | null
    ): ReserveUsedAsCollateralDisabledEventFilter;

    "ReserveUsedAsCollateralEnabled(address,address)"(
      reserve?: string | null,
      user?: string | null
    ): ReserveUsedAsCollateralEnabledEventFilter;
    ReserveUsedAsCollateralEnabled(
      reserve?: string | null,
      user?: string | null
    ): ReserveUsedAsCollateralEnabledEventFilter;
  };

  estimateGas: {
    liquidationCall(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    liquidationCall(
      collateralAsset: string,
      debtAsset: string,
      user: string,
      debtToCover: BigNumberish,
      receiveAToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
