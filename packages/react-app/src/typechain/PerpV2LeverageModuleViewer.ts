/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type VAssetDisplayInfoStruct = {
  symbol: string;
  vAssetAddress: string;
  positionUnit: BigNumberish;
  indexPrice: BigNumberish;
  currentLeverageRatio: BigNumberish;
};

export type VAssetDisplayInfoStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  symbol: string;
  vAssetAddress: string;
  positionUnit: BigNumber;
  indexPrice: BigNumber;
  currentLeverageRatio: BigNumber;
};

export interface PerpV2LeverageModuleViewerInterface extends utils.Interface {
  functions: {
    "collateralToken()": FunctionFragment;
    "getMaximumSetTokenIssueAmount(address,int256)": FunctionFragment;
    "getTotalCollateralUnit(address)": FunctionFragment;
    "getVirtualAssetsDisplayInfo(address)": FunctionFragment;
    "perpAccountBalance()": FunctionFragment;
    "perpClearingHouseConfig()": FunctionFragment;
    "perpModule()": FunctionFragment;
    "vQuoteToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumSetTokenIssueAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCollateralUnit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVirtualAssetsDisplayInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "perpAccountBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "perpClearingHouseConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "perpModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vQuoteToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumSetTokenIssueAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCollateralUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVirtualAssetsDisplayInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "perpAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "perpClearingHouseConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "perpModule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vQuoteToken",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PerpV2LeverageModuleViewer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PerpV2LeverageModuleViewerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    getMaximumSetTokenIssueAmount(
      _setToken: string,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalCollateralUnit(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getVirtualAssetsDisplayInfo(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<
      [VAssetDisplayInfoStructOutput[]] & {
        assetInfo: VAssetDisplayInfoStructOutput[];
      }
    >;

    perpAccountBalance(overrides?: CallOverrides): Promise<[string]>;

    perpClearingHouseConfig(overrides?: CallOverrides): Promise<[string]>;

    perpModule(overrides?: CallOverrides): Promise<[string]>;

    vQuoteToken(overrides?: CallOverrides): Promise<[string]>;
  };

  collateralToken(overrides?: CallOverrides): Promise<string>;

  getMaximumSetTokenIssueAmount(
    _setToken: string,
    _slippage: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalCollateralUnit(
    _setToken: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  getVirtualAssetsDisplayInfo(
    _setToken: string,
    overrides?: CallOverrides
  ): Promise<VAssetDisplayInfoStructOutput[]>;

  perpAccountBalance(overrides?: CallOverrides): Promise<string>;

  perpClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

  perpModule(overrides?: CallOverrides): Promise<string>;

  vQuoteToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    collateralToken(overrides?: CallOverrides): Promise<string>;

    getMaximumSetTokenIssueAmount(
      _setToken: string,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalCollateralUnit(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getVirtualAssetsDisplayInfo(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<VAssetDisplayInfoStructOutput[]>;

    perpAccountBalance(overrides?: CallOverrides): Promise<string>;

    perpClearingHouseConfig(overrides?: CallOverrides): Promise<string>;

    perpModule(overrides?: CallOverrides): Promise<string>;

    vQuoteToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    getMaximumSetTokenIssueAmount(
      _setToken: string,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalCollateralUnit(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVirtualAssetsDisplayInfo(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    perpAccountBalance(overrides?: CallOverrides): Promise<BigNumber>;

    perpClearingHouseConfig(overrides?: CallOverrides): Promise<BigNumber>;

    perpModule(overrides?: CallOverrides): Promise<BigNumber>;

    vQuoteToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaximumSetTokenIssueAmount(
      _setToken: string,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalCollateralUnit(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVirtualAssetsDisplayInfo(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    perpAccountBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    perpClearingHouseConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    perpModule(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vQuoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
