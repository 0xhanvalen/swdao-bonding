/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type WrappedBatchCallStruct = {
  selector: BytesLike;
  sellAmount: BigNumberish;
  data: BytesLike;
};

export type WrappedBatchCallStructOutput = [string, BigNumber, string] & {
  selector: string;
  sellAmount: BigNumber;
  data: string;
};

export type BatchFillDataStruct = {
  inputToken: string;
  outputToken: string;
  sellAmount: BigNumberish;
  calls: WrappedBatchCallStruct[];
};

export type BatchFillDataStructOutput = [
  string,
  string,
  BigNumber,
  WrappedBatchCallStructOutput[]
] & {
  inputToken: string;
  outputToken: string;
  sellAmount: BigNumber;
  calls: WrappedBatchCallStructOutput[];
};

export type WrappedMultiHopCallStruct = {
  selector: BytesLike;
  data: BytesLike;
};

export type WrappedMultiHopCallStructOutput = [string, string] & {
  selector: string;
  data: string;
};

export type MultiHopFillDataStruct = {
  tokens: string[];
  sellAmount: BigNumberish;
  calls: WrappedMultiHopCallStruct[];
};

export type MultiHopFillDataStructOutput = [
  string[],
  BigNumber,
  WrappedMultiHopCallStructOutput[]
] & {
  tokens: string[];
  sellAmount: BigNumber;
  calls: WrappedMultiHopCallStructOutput[];
};

export type BatchSellSubcallStruct = {
  subcall: BigNumberish;
  sellAmount: BigNumberish;
  data: BytesLike;
};

export type BatchSellSubcallStructOutput = [number, BigNumber, string] & {
  subcall: number;
  sellAmount: BigNumber;
  data: string;
};

export type MultiHopSellSubcallStruct = {
  subcall: BigNumberish;
  data: BytesLike;
};

export type MultiHopSellSubcallStructOutput = [number, string] & {
  subcall: number;
  data: string;
};

export type TransformationStruct = {
  deploymentNonce: BigNumberish;
  data: BytesLike;
};

export type TransformationStructOutput = [number, string] & {
  deploymentNonce: number;
  data: string;
};

export interface ZeroExMockInterface extends utils.Interface {
  functions: {
    "addSetTokenAddress(address)": FunctionFragment;
    "batchFill((address,address,uint256,(bytes4,uint256,bytes)[]),uint256)": FunctionFragment;
    "mockReceiveAmount()": FunctionFragment;
    "mockReceiveToken()": FunctionFragment;
    "mockSendAmount()": FunctionFragment;
    "mockSendToken()": FunctionFragment;
    "multiHopFill((address[],uint256,(bytes4,bytes)[]),uint256)": FunctionFragment;
    "multiplexBatchSellTokenForToken(address,address,(uint8,uint256,bytes)[],uint256,uint256)": FunctionFragment;
    "multiplexMultiHopSellTokenForToken(address[],(uint8,bytes)[],uint256,uint256)": FunctionFragment;
    "sellToLiquidityProvider(address,address,address,address,uint256,uint256,bytes)": FunctionFragment;
    "sellToUniswap(address[],uint256,uint256,bool)": FunctionFragment;
    "sellTokenForTokenToUniswapV3(bytes,uint256,uint256,address)": FunctionFragment;
    "setTokenAddress()": FunctionFragment;
    "transformERC20(address,address,uint256,uint256,(uint32,bytes)[])": FunctionFragment;
    "transformERC20Staging(address,address,uint256,uint256,(uint32,bytes)[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSetTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchFill",
    values: [BatchFillDataStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mockReceiveAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockReceiveToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockSendAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockSendToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiHopFill",
    values: [MultiHopFillDataStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplexBatchSellTokenForToken",
    values: [
      string,
      string,
      BatchSellSubcallStruct[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplexMultiHopSellTokenForToken",
    values: [string[], MultiHopSellSubcallStruct[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellToLiquidityProvider",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sellToUniswap",
    values: [string[], BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sellTokenForTokenToUniswapV3",
    values: [BytesLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transformERC20",
    values: [string, string, BigNumberish, BigNumberish, TransformationStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transformERC20Staging",
    values: [string, string, BigNumberish, BigNumberish, TransformationStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSetTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchFill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockReceiveAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockReceiveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSendAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSendToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiHopFill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplexBatchSellTokenForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplexMultiHopSellTokenForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellToLiquidityProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellToUniswap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTokenForTokenToUniswapV3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transformERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transformERC20Staging",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ZeroExMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZeroExMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSetTokenAddress(
      _setTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchFill(
      arg0: BatchFillDataStruct,
      arg1: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mockReceiveAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    mockReceiveToken(overrides?: CallOverrides): Promise<[string]>;

    mockSendAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    mockSendToken(overrides?: CallOverrides): Promise<[string]>;

    multiHopFill(
      arg0: MultiHopFillDataStruct,
      arg1: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiplexBatchSellTokenForToken(
      arg0: string,
      arg1: string,
      arg2: BatchSellSubcallStruct[],
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiplexMultiHopSellTokenForToken(
      arg0: string[],
      arg1: MultiHopSellSubcallStruct[],
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellToLiquidityProvider(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellToUniswap(
      arg0: string[],
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellTokenForTokenToUniswapV3(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    transformERC20(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: TransformationStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transformERC20Staging(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: TransformationStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addSetTokenAddress(
    _setTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchFill(
    arg0: BatchFillDataStruct,
    arg1: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mockReceiveAmount(overrides?: CallOverrides): Promise<BigNumber>;

  mockReceiveToken(overrides?: CallOverrides): Promise<string>;

  mockSendAmount(overrides?: CallOverrides): Promise<BigNumber>;

  mockSendToken(overrides?: CallOverrides): Promise<string>;

  multiHopFill(
    arg0: MultiHopFillDataStruct,
    arg1: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiplexBatchSellTokenForToken(
    arg0: string,
    arg1: string,
    arg2: BatchSellSubcallStruct[],
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiplexMultiHopSellTokenForToken(
    arg0: string[],
    arg1: MultiHopSellSubcallStruct[],
    arg2: BigNumberish,
    arg3: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellToLiquidityProvider(
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: string,
    arg4: BigNumberish,
    arg5: BigNumberish,
    arg6: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellToUniswap(
    arg0: string[],
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellTokenForTokenToUniswapV3(
    arg0: BytesLike,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenAddress(overrides?: CallOverrides): Promise<string>;

  transformERC20(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: TransformationStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transformERC20Staging(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: TransformationStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSetTokenAddress(
      _setTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    batchFill(
      arg0: BatchFillDataStruct,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mockReceiveAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mockReceiveToken(overrides?: CallOverrides): Promise<string>;

    mockSendAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mockSendToken(overrides?: CallOverrides): Promise<string>;

    multiHopFill(
      arg0: MultiHopFillDataStruct,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiplexBatchSellTokenForToken(
      arg0: string,
      arg1: string,
      arg2: BatchSellSubcallStruct[],
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiplexMultiHopSellTokenForToken(
      arg0: string[],
      arg1: MultiHopSellSubcallStruct[],
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellToLiquidityProvider(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellToUniswap(
      arg0: string[],
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellTokenForTokenToUniswapV3(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTokenAddress(overrides?: CallOverrides): Promise<string>;

    transformERC20(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: TransformationStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transformERC20Staging(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: TransformationStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addSetTokenAddress(
      _setTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchFill(
      arg0: BatchFillDataStruct,
      arg1: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mockReceiveAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mockReceiveToken(overrides?: CallOverrides): Promise<BigNumber>;

    mockSendAmount(overrides?: CallOverrides): Promise<BigNumber>;

    mockSendToken(overrides?: CallOverrides): Promise<BigNumber>;

    multiHopFill(
      arg0: MultiHopFillDataStruct,
      arg1: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiplexBatchSellTokenForToken(
      arg0: string,
      arg1: string,
      arg2: BatchSellSubcallStruct[],
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiplexMultiHopSellTokenForToken(
      arg0: string[],
      arg1: MultiHopSellSubcallStruct[],
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellToLiquidityProvider(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellToUniswap(
      arg0: string[],
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellTokenForTokenToUniswapV3(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transformERC20(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: TransformationStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transformERC20Staging(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: TransformationStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSetTokenAddress(
      _setTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchFill(
      arg0: BatchFillDataStruct,
      arg1: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mockReceiveAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockReceiveToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockSendAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockSendToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiHopFill(
      arg0: MultiHopFillDataStruct,
      arg1: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiplexBatchSellTokenForToken(
      arg0: string,
      arg1: string,
      arg2: BatchSellSubcallStruct[],
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiplexMultiHopSellTokenForToken(
      arg0: string[],
      arg1: MultiHopSellSubcallStruct[],
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellToLiquidityProvider(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellToUniswap(
      arg0: string[],
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellTokenForTokenToUniswapV3(
      arg0: BytesLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transformERC20(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: TransformationStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transformERC20Staging(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: TransformationStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
