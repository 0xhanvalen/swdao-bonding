/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ISynthetixExchangerInterface extends utils.Interface {
  functions: {
    "exchange(address,bytes32,uint256,bytes32,address)": FunctionFragment;
    "getAmountsForExchange(uint256,bytes32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "exchange",
    values: [string, BytesLike, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsForExchange",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsForExchange",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISynthetixExchanger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISynthetixExchangerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    exchange(
      from: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      destinationAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAmountsForExchange(
      sourceAmount: BigNumberish,
      sourceCurrencyKey: BytesLike,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountReceived: BigNumber;
        fee: BigNumber;
        exchangeFeeRate: BigNumber;
      }
    >;
  };

  exchange(
    from: string,
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    destinationAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAmountsForExchange(
    sourceAmount: BigNumberish,
    sourceCurrencyKey: BytesLike,
    destinationCurrencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountReceived: BigNumber;
      fee: BigNumber;
      exchangeFeeRate: BigNumber;
    }
  >;

  callStatic: {
    exchange(
      from: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      destinationAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsForExchange(
      sourceAmount: BigNumberish,
      sourceCurrencyKey: BytesLike,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountReceived: BigNumber;
        fee: BigNumber;
        exchangeFeeRate: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    exchange(
      from: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      destinationAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAmountsForExchange(
      sourceAmount: BigNumberish,
      sourceCurrencyKey: BytesLike,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exchange(
      from: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      destinationAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAmountsForExchange(
      sourceAmount: BigNumberish,
      sourceCurrencyKey: BytesLike,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
