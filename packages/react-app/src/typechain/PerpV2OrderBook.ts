/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type GrowthStruct = {
  twPremiumX96: BigNumberish;
  twPremiumDivBySqrtPriceX96: BigNumberish;
};

export type GrowthStructOutput = [BigNumber, BigNumber] & {
  twPremiumX96: BigNumber;
  twPremiumDivBySqrtPriceX96: BigNumber;
};

export type AddLiquidityParamsStruct = {
  trader: string;
  baseToken: string;
  base: BigNumberish;
  quote: BigNumberish;
  lowerTick: BigNumberish;
  upperTick: BigNumberish;
  fundingGrowthGlobal: GrowthStruct;
};

export type AddLiquidityParamsStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  number,
  number,
  GrowthStructOutput
] & {
  trader: string;
  baseToken: string;
  base: BigNumber;
  quote: BigNumber;
  lowerTick: number;
  upperTick: number;
  fundingGrowthGlobal: GrowthStructOutput;
};

export type AddLiquidityResponseStruct = {
  base: BigNumberish;
  quote: BigNumberish;
  fee: BigNumberish;
  liquidity: BigNumberish;
};

export type AddLiquidityResponseStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & { base: BigNumber; quote: BigNumber; fee: BigNumber; liquidity: BigNumber };

export type InfoStruct = {
  liquidity: BigNumberish;
  lowerTick: BigNumberish;
  upperTick: BigNumberish;
  lastFeeGrowthInsideX128: BigNumberish;
  lastTwPremiumGrowthInsideX96: BigNumberish;
  lastTwPremiumGrowthBelowX96: BigNumberish;
  lastTwPremiumDivBySqrtPriceGrowthInsideX96: BigNumberish;
  baseDebt: BigNumberish;
  quoteDebt: BigNumberish;
};

export type InfoStructOutput = [
  BigNumber,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  liquidity: BigNumber;
  lowerTick: number;
  upperTick: number;
  lastFeeGrowthInsideX128: BigNumber;
  lastTwPremiumGrowthInsideX96: BigNumber;
  lastTwPremiumGrowthBelowX96: BigNumber;
  lastTwPremiumDivBySqrtPriceGrowthInsideX96: BigNumber;
  baseDebt: BigNumber;
  quoteDebt: BigNumber;
};

export type RemoveLiquidityParamsStruct = {
  maker: string;
  baseToken: string;
  lowerTick: BigNumberish;
  upperTick: BigNumberish;
  liquidity: BigNumberish;
};

export type RemoveLiquidityParamsStructOutput = [
  string,
  string,
  number,
  number,
  BigNumber
] & {
  maker: string;
  baseToken: string;
  lowerTick: number;
  upperTick: number;
  liquidity: BigNumber;
};

export type RemoveLiquidityResponseStruct = {
  base: BigNumberish;
  quote: BigNumberish;
  fee: BigNumberish;
  takerBase: BigNumberish;
  takerQuote: BigNumberish;
};

export type RemoveLiquidityResponseStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  base: BigNumber;
  quote: BigNumber;
  fee: BigNumber;
  takerBase: BigNumber;
  takerQuote: BigNumber;
};

export type ReplaySwapParamsStruct = {
  baseToken: string;
  isBaseToQuote: boolean;
  shouldUpdateState: boolean;
  amount: BigNumberish;
  sqrtPriceLimitX96: BigNumberish;
  exchangeFeeRatio: BigNumberish;
  uniswapFeeRatio: BigNumberish;
  globalFundingGrowth: GrowthStruct;
};

export type ReplaySwapParamsStructOutput = [
  string,
  boolean,
  boolean,
  BigNumber,
  BigNumber,
  number,
  number,
  GrowthStructOutput
] & {
  baseToken: string;
  isBaseToQuote: boolean;
  shouldUpdateState: boolean;
  amount: BigNumber;
  sqrtPriceLimitX96: BigNumber;
  exchangeFeeRatio: number;
  uniswapFeeRatio: number;
  globalFundingGrowth: GrowthStructOutput;
};

export type ReplaySwapResponseStruct = {
  tick: BigNumberish;
  fee: BigNumberish;
  insuranceFundFee: BigNumberish;
};

export type ReplaySwapResponseStructOutput = [number, BigNumber, BigNumber] & {
  tick: number;
  fee: BigNumber;
  insuranceFundFee: BigNumber;
};

export interface PerpV2OrderBookInterface extends utils.Interface {
  functions: {
    "addLiquidity((address,address,uint256,uint256,int24,int24,(int256,int256)))": FunctionFragment;
    "candidate()": FunctionFragment;
    "getClearingHouse()": FunctionFragment;
    "getExchange()": FunctionFragment;
    "getLiquidityCoefficientInFundingPayment(address,address,(int256,int256))": FunctionFragment;
    "getMarketRegistry()": FunctionFragment;
    "getOpenOrder(address,address,int24,int24)": FunctionFragment;
    "getOpenOrderById(bytes32)": FunctionFragment;
    "getOpenOrderIds(address,address)": FunctionFragment;
    "getPendingFee(address,address,int24,int24)": FunctionFragment;
    "getTotalOrderDebt(address,address,bool)": FunctionFragment;
    "getTotalQuoteBalanceAndPendingFee(address,address[])": FunctionFragment;
    "getTotalTokenAmountInPoolAndPendingFee(address,address,bool)": FunctionFragment;
    "hasOrder(address,address[])": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeLiquidity((address,address,int24,int24,uint128))": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "replaySwap((address,bool,bool,int256,uint160,uint24,uint24,(int256,int256)))": FunctionFragment;
    "setClearingHouse(address)": FunctionFragment;
    "setExchange(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "uniswapV3MintCallback(uint256,uint256,bytes)": FunctionFragment;
    "updateFundingGrowthAndLiquidityCoefficientInFundingPayment(address,address,(int256,int256))": FunctionFragment;
    "updateOrderDebt(bytes32,int256,int256)": FunctionFragment;
    "updateOwner()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [AddLiquidityParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getClearingHouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityCoefficientInFundingPayment",
    values: [string, string, GrowthStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenOrder",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenOrderById",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenOrderIds",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingFee",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalOrderDebt",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalQuoteBalanceAndPendingFee",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokenAmountInPoolAndPendingFee",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "hasOrder",
    values: [string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [RemoveLiquidityParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replaySwap",
    values: [ReplaySwapParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setClearingHouse",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setExchange", values: [string]): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "uniswapV3MintCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFundingGrowthAndLiquidityCoefficientInFundingPayment",
    values: [string, string, GrowthStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrderDebt",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClearingHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityCoefficientInFundingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenOrderById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenOrderIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalOrderDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalQuoteBalanceAndPendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokenAmountInPoolAndPendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "replaySwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClearingHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3MintCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFundingGrowthAndLiquidityCoefficientInFundingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOrderDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;

  events: {
    "ClearingHouseChanged(address)": EventFragment;
    "ExchangeChanged(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClearingHouseChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ClearingHouseChangedEvent = TypedEvent<
  [string],
  { clearingHouse: string }
>;

export type ClearingHouseChangedEventFilter = TypedEventFilter<ClearingHouseChangedEvent>;

export type ExchangeChangedEvent = TypedEvent<[string], { exchange: string }>;

export type ExchangeChangedEventFilter = TypedEventFilter<ExchangeChangedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PerpV2OrderBook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PerpV2OrderBookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      params: AddLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    getClearingHouse(overrides?: CallOverrides): Promise<[string]>;

    getExchange(overrides?: CallOverrides): Promise<[string]>;

    getLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: GrowthStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber] & { liquidityCoefficientInFundingPayment: BigNumber }
    >;

    getMarketRegistry(overrides?: CallOverrides): Promise<[string]>;

    getOpenOrder(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[InfoStructOutput]>;

    getOpenOrderById(
      orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[InfoStructOutput]>;

    getOpenOrderIds(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getPendingFee(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalOrderDebt(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalQuoteBalanceAndPendingFee(
      trader: string,
      baseTokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalQuoteAmountInPools: BigNumber;
        totalPendingFee: BigNumber;
      }
    >;

    getTotalTokenAmountInPoolAndPendingFee(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { tokenAmount: BigNumber; pendingFee: BigNumber }
    >;

    hasOrder(
      trader: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      marketRegistryArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidity(
      params: RemoveLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    replaySwap(
      params: ReplaySwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClearingHouse(
      clearingHouseArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExchange(
      exchangeArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV3MintCallback(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFundingGrowthAndLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: GrowthStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOrderDebt(
      orderId: BytesLike,
      base: BigNumberish,
      quote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    params: AddLiquidityParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  candidate(overrides?: CallOverrides): Promise<string>;

  getClearingHouse(overrides?: CallOverrides): Promise<string>;

  getExchange(overrides?: CallOverrides): Promise<string>;

  getLiquidityCoefficientInFundingPayment(
    trader: string,
    baseToken: string,
    fundingGrowthGlobal: GrowthStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketRegistry(overrides?: CallOverrides): Promise<string>;

  getOpenOrder(
    trader: string,
    baseToken: string,
    lowerTick: BigNumberish,
    upperTick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<InfoStructOutput>;

  getOpenOrderById(
    orderId: BytesLike,
    overrides?: CallOverrides
  ): Promise<InfoStructOutput>;

  getOpenOrderIds(
    trader: string,
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getPendingFee(
    trader: string,
    baseToken: string,
    lowerTick: BigNumberish,
    upperTick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalOrderDebt(
    trader: string,
    baseToken: string,
    fetchBase: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalQuoteBalanceAndPendingFee(
    trader: string,
    baseTokens: string[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalQuoteAmountInPools: BigNumber;
      totalPendingFee: BigNumber;
    }
  >;

  getTotalTokenAmountInPoolAndPendingFee(
    trader: string,
    baseToken: string,
    fetchBase: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { tokenAmount: BigNumber; pendingFee: BigNumber }
  >;

  hasOrder(
    trader: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    marketRegistryArg: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeLiquidity(
    params: RemoveLiquidityParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  replaySwap(
    params: ReplaySwapParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClearingHouse(
    clearingHouseArg: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExchange(
    exchangeArg: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV3MintCallback(
    amount0Owed: BigNumberish,
    amount1Owed: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFundingGrowthAndLiquidityCoefficientInFundingPayment(
    trader: string,
    baseToken: string,
    fundingGrowthGlobal: GrowthStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOrderDebt(
    orderId: BytesLike,
    base: BigNumberish,
    quote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      params: AddLiquidityParamsStruct,
      overrides?: CallOverrides
    ): Promise<AddLiquidityResponseStructOutput>;

    candidate(overrides?: CallOverrides): Promise<string>;

    getClearingHouse(overrides?: CallOverrides): Promise<string>;

    getExchange(overrides?: CallOverrides): Promise<string>;

    getLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: GrowthStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketRegistry(overrides?: CallOverrides): Promise<string>;

    getOpenOrder(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<InfoStructOutput>;

    getOpenOrderById(
      orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<InfoStructOutput>;

    getOpenOrderIds(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getPendingFee(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOrderDebt(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalQuoteBalanceAndPendingFee(
      trader: string,
      baseTokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalQuoteAmountInPools: BigNumber;
        totalPendingFee: BigNumber;
      }
    >;

    getTotalTokenAmountInPoolAndPendingFee(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { tokenAmount: BigNumber; pendingFee: BigNumber }
    >;

    hasOrder(
      trader: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      marketRegistryArg: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeLiquidity(
      params: RemoveLiquidityParamsStruct,
      overrides?: CallOverrides
    ): Promise<RemoveLiquidityResponseStructOutput>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    replaySwap(
      params: ReplaySwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<ReplaySwapResponseStructOutput>;

    setClearingHouse(
      clearingHouseArg: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setExchange(exchangeArg: string, overrides?: CallOverrides): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    uniswapV3MintCallback(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFundingGrowthAndLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: GrowthStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateOrderDebt(
      orderId: BytesLike,
      base: BigNumberish,
      quote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOwner(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ClearingHouseChanged(address)"(
      clearingHouse?: string | null
    ): ClearingHouseChangedEventFilter;
    ClearingHouseChanged(
      clearingHouse?: string | null
    ): ClearingHouseChangedEventFilter;

    "ExchangeChanged(address)"(
      exchange?: string | null
    ): ExchangeChangedEventFilter;
    ExchangeChanged(exchange?: string | null): ExchangeChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addLiquidity(
      params: AddLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    getClearingHouse(overrides?: CallOverrides): Promise<BigNumber>;

    getExchange(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: GrowthStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getOpenOrder(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenOrderById(
      orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpenOrderIds(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingFee(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalOrderDebt(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalQuoteBalanceAndPendingFee(
      trader: string,
      baseTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTokenAmountInPoolAndPendingFee(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasOrder(
      trader: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      marketRegistryArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      params: RemoveLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    replaySwap(
      params: ReplaySwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClearingHouse(
      clearingHouseArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExchange(
      exchangeArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV3MintCallback(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFundingGrowthAndLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: GrowthStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOrderDebt(
      orderId: BytesLike,
      base: BigNumberish,
      quote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      params: AddLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClearingHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: GrowthStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOpenOrder(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenOrderById(
      orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenOrderIds(
      trader: string,
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingFee(
      trader: string,
      baseToken: string,
      lowerTick: BigNumberish,
      upperTick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalOrderDebt(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalQuoteBalanceAndPendingFee(
      trader: string,
      baseTokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTokenAmountInPoolAndPendingFee(
      trader: string,
      baseToken: string,
      fetchBase: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasOrder(
      trader: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      marketRegistryArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      params: RemoveLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    replaySwap(
      params: ReplaySwapParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClearingHouse(
      clearingHouseArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExchange(
      exchangeArg: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3MintCallback(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFundingGrowthAndLiquidityCoefficientInFundingPayment(
      trader: string,
      baseToken: string,
      fundingGrowthGlobal: GrowthStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOrderDebt(
      orderId: BytesLike,
      base: BigNumberish,
      quote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
