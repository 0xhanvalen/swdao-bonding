/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ComptrollerMockInterface extends utils.Interface {
  functions: {
    "addSetTokenAddress(address)": FunctionFragment;
    "allMarkets(uint256)": FunctionFragment;
    "claimComp(address)": FunctionFragment;
    "comp()": FunctionFragment;
    "compAccrued(address)": FunctionFragment;
    "compAmount()": FunctionFragment;
    "enterMarkets(address[])": FunctionFragment;
    "getAllMarkets()": FunctionFragment;
    "getCompAddress()": FunctionFragment;
    "setCompAccrued(address,uint256)": FunctionFragment;
    "setCompAmount(uint256)": FunctionFragment;
    "setToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSetTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allMarkets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claimComp", values: [string]): string;
  encodeFunctionData(functionFragment: "comp", values?: undefined): string;
  encodeFunctionData(functionFragment: "compAccrued", values: [string]): string;
  encodeFunctionData(
    functionFragment: "compAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enterMarkets",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCompAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCompAccrued",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addSetTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allMarkets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimComp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "comp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "compAmount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;

  events: {};
}

export interface ComptrollerMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ComptrollerMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSetTokenAddress(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allMarkets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    claimComp(
      _holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    comp(overrides?: CallOverrides): Promise<[string]>;

    compAccrued(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    compAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    enterMarkets(
      _cTokens: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAllMarkets(overrides?: CallOverrides): Promise<[string[]]>;

    getCompAddress(overrides?: CallOverrides): Promise<[string]>;

    setCompAccrued(
      _holder: string,
      _compAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCompAmount(
      _compAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setToken(overrides?: CallOverrides): Promise<[string]>;
  };

  addSetTokenAddress(
    _setToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allMarkets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  claimComp(
    _holder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  comp(overrides?: CallOverrides): Promise<string>;

  compAccrued(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  compAmount(overrides?: CallOverrides): Promise<BigNumber>;

  enterMarkets(
    _cTokens: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

  getCompAddress(overrides?: CallOverrides): Promise<string>;

  setCompAccrued(
    _holder: string,
    _compAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCompAmount(
    _compAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addSetTokenAddress(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allMarkets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    claimComp(_holder: string, overrides?: CallOverrides): Promise<void>;

    comp(overrides?: CallOverrides): Promise<string>;

    compAccrued(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    compAmount(overrides?: CallOverrides): Promise<BigNumber>;

    enterMarkets(
      _cTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

    getCompAddress(overrides?: CallOverrides): Promise<string>;

    setCompAccrued(
      _holder: string,
      _compAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCompAmount(
      _compAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addSetTokenAddress(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allMarkets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimComp(
      _holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    comp(overrides?: CallOverrides): Promise<BigNumber>;

    compAccrued(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    compAmount(overrides?: CallOverrides): Promise<BigNumber>;

    enterMarkets(
      _cTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getCompAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setCompAccrued(
      _holder: string,
      _compAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCompAmount(
      _compAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addSetTokenAddress(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allMarkets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimComp(
      _holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    comp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    compAccrued(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enterMarkets(
      _cTokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCompAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCompAccrued(
      _holder: string,
      _compAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCompAmount(
      _compAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
